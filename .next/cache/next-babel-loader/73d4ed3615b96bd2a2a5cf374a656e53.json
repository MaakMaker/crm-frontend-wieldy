{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport contactList from \"./data/contactList\";\nimport ContactList from \"../../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\nimport AddContact from \"../../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport './index.css';\nlet contactId = 723812738;\nconst filterOptions = [{\n  id: 1,\n  name: 'All contacts',\n  icon: 'all-contacts'\n}, {\n  id: 2,\n  name: 'Frequently contacted',\n  icon: 'frequent'\n}, {\n  id: 3,\n  name: 'Starred contacts',\n  icon: 'star'\n}];\n\nclass Contact extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"ContactSideBar\", user => {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-contacts gx-mr-4\"\n      }), __jsx(\"span\", null, __jsx(IntlMessages, {\n        id: \"chat.contacts\"\n      })))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New Contact\"))), __jsx(\"div\", {\n        className: \"gx-module-side-nav\"\n      }, __jsx(\"ul\", {\n        className: \"gx-module-nav\"\n      }, filterOptions.map(option => __jsx(\"li\", {\n        key: option.id,\n        className: \"gx-nav-item\"\n      }, __jsx(\"span\", {\n        className: `gx-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`,\n        onClick: this.onFilterOptionSelect.bind(this, option)\n      }, __jsx(\"i\", {\n        className: `icon icon-${option.icon}`\n      }), __jsx(\"span\", null, option.name)))))))));\n    });\n\n    _defineProperty(this, \"addFavourite\", data => {\n      this.setState({\n        alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\n        showMessage: true,\n        contactList: this.state.contactList.map(contact => contact.id === data.id ? _objectSpread(_objectSpread({}, contact), {}, {\n          starred: !data.starred\n        }) : contact),\n        allContact: this.state.allContact.map(contact => contact.id === data.id ? _objectSpread(_objectSpread({}, contact), {}, {\n          starred: !data.starred\n        }) : contact)\n      });\n    });\n\n    _defineProperty(this, \"onContactSelect\", data => {\n      data.selected = !data.selected;\n      let selectedContacts = 0;\n      const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n      this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(this, \"onAddContact\", () => {\n      this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(this, \"onContactClose\", () => {\n      this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(this, \"onFilterOptionSelect\", option => {\n      switch (option.name) {\n        case 'All contacts':\n          {\n            this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: this.state.allContact\n            });\n            break;\n          }\n\n        case 'Frequently contacted':\n          {\n            this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: this.state.allContact.filter(contact => contact.frequently)\n            });\n            break;\n          }\n\n        case 'Starred contacts':\n          {\n            this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: this.state.allContact.filter(contact => contact.starred)\n            });\n            break;\n          }\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onSaveContact\", data => {\n      let isNew = true;\n      const contactList = this.state.allContact.map(contact => {\n        if (contact.id === data.id) {\n          isNew = false;\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      if (isNew) {\n        contactList.push(data);\n      }\n\n      this.setState({\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n        showMessage: true,\n        contactList: contactList,\n        allContact: contactList\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n    });\n\n    _defineProperty(this, \"onDeleteContact\", data => {\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: this.state.allContact.filter(contact => contact.id !== data.id),\n        contactList: this.state.allContact.filter(contact => contact.id !== data.id)\n      });\n    });\n\n    _defineProperty(this, \"onDeleteSelectedContact\", () => {\n      const contacts = this.state.allContact.filter(contact => !contact.selected);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    });\n\n    _defineProperty(this, \"filterContact\", userName => {\n      const {\n        filterOption\n      } = this.state;\n\n      if (userName === '') {\n        this.setState({\n          contactList: this.state.allContact\n        });\n      } else {\n        const filterContact = this.state.allContact.filter(contact => contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n\n        if (filterOption === 'All contacts') {\n          this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.frequently)\n          });\n        } else if (filterOption === 'Starred contacts') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.starred)\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        showMessage: false\n      });\n    });\n\n    _defineProperty(this, \"getAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: true\n      }) : contact);\n      this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(this, \"getUnselectedAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: false\n      }) : contact);\n      this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value\n    });\n    this.filterContact(evt.target.value);\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      user,\n      contactList,\n      addContactState,\n      drawerState,\n      selectedContacts,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"gx-main-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-app-module\"\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\"\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this)\n    }, this.ContactSideBar())), __jsx(\"div\", {\n      className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n    }, this.ContactSideBar(user)), __jsx(\"div\", {\n      className: \"gx-module-box\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-header\"\n    }, __jsx(\"span\", {\n      className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-menu gx-icon-btn\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this)\n    })), __jsx(AppModuleHeader, {\n      placeholder: \"Search contact\",\n      notification: false,\n      apps: false,\n      user: this.state.user,\n      onChange: this.updateContactUser.bind(this),\n      value: this.state.searchUser\n    })), __jsx(\"div\", {\n      className: \"gx-module-box-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-topbar\"\n    }, __jsx(Checkbox, {\n      color: \"primary\",\n      className: \"gx-icon-btn\",\n      indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n      checked: selectedContacts > 0,\n      onChange: this.onAllContactSelect.bind(this),\n      value: \"SelectMail\"\n    }), selectedContacts > 0 && __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-trash\",\n      onClick: this.onDeleteSelectedContact.bind(this)\n    })), __jsx(CustomScrollbars, {\n      className: \"gx-module-content-scroll\"\n    }, contactList.length === 0 ? __jsx(\"div\", {\n      className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\"\n    }, noContentFoundMessage) : __jsx(ContactList, {\n      contactList: contactList,\n      addFavourite: this.addFavourite.bind(this),\n      onContactSelect: this.onContactSelect.bind(this),\n      onDeleteContact: this.onDeleteContact.bind(this),\n      onSaveContact: this.onSaveContact.bind(this)\n    }))))), __jsx(AddContact, {\n      open: addContactState,\n      contact: {\n        'id': contactId++,\n        'name': '',\n        'thumb': '',\n        'email': '',\n        'phone': '',\n        'designation': '',\n        'selected': false,\n        'starred': false,\n        'frequently': false\n      },\n      onSaveContact: this.onSaveContact,\n      onContactClose: this.onContactClose,\n      onDeleteContact: this.onDeleteContact\n    }), showMessage && message.info(__jsx(\"span\", {\n      id: \"message-id\"\n    }, alertMessage), 3, this.handleRequestClose));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/inbuiltApps/Contact/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","contactId","filterOptions","id","name","icon","Contact","constructor","user","onAddContact","map","option","state","selectedSectionId","onFilterOptionSelect","bind","data","setState","alertMessage","starred","showMessage","contact","allContact","selected","selectedContacts","addContactState","filterOption","filter","frequently","isNew","push","contacts","userName","filterContact","toLowerCase","indexOf","length","noContentFoundMessage","drawerState","email","avatar","searchUser","selectedContact","onAllContactSelect","selectAll","getAllContact","getUnselectedAllContact","updateContactUser","evt","target","value","onToggleDrawer","render","ContactSideBar","onDeleteSelectedContact","addFavourite","onContactSelect","onDeleteContact","onSaveContact","onContactClose","info","handleRequestClose"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Button, Checkbox, Drawer, message} from \"antd\";\r\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\r\n\r\nimport contactList from \"./data/contactList\";\r\nimport ContactList from \"../../../app/components/contact/ContactList\";\r\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\r\nimport AddContact from \"../../../app/components/contact/AddContact\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\nimport './index.css';\r\n\r\nlet contactId = 723812738;\r\n\r\nconst filterOptions = [\r\n  {\r\n    id: 1,\r\n    name: 'All contacts',\r\n    icon: 'all-contacts'\r\n  }, {\r\n    id: 2,\r\n    name: 'Frequently contacted',\r\n    icon: 'frequent'\r\n\r\n  }, {\r\n\r\n    id: 3,\r\n    name: 'Starred contacts',\r\n    icon: 'star'\r\n  }\r\n];\r\n\r\nclass Contact extends Component {\r\n\r\n  ContactSideBar = (user) => {\r\n    return <div className=\"gx-module-side\">\r\n      <div className=\"gx-module-side-header\">\r\n        <div className=\"gx-module-logo\">\r\n          <i className=\"icon icon-contacts gx-mr-4\"/>\r\n          <span><IntlMessages id=\"chat.contacts\"/></span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"gx-module-side-content\">\r\n        <CustomScrollbars className=\"gx-module-side-scroll\">\r\n          <div className=\"gx-module-add-task\">\r\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\r\n                    onClick={this.onAddContact}>\r\n              <i className=\"icon icon-add gx-mr-2\"/>\r\n              <span>Add New Contact</span>\r\n            </Button>\r\n          </div>\r\n          <div className=\"gx-module-side-nav\">\r\n            <ul className=\"gx-module-nav\">\r\n              {filterOptions.map(option => <li key={option.id} className=\"gx-nav-item\">\r\n                  <span\r\n                    className={`gx-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\r\n                    this.onFilterOptionSelect.bind(this, option)\r\n                  }>\r\n                    <i className={`icon icon-${option.icon}`}/>\r\n                    <span>{option.name}</span>\r\n                  </span>\r\n                </li>\r\n              )}\r\n\r\n            </ul>\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n\r\n  };\r\n\r\n  addFavourite = (data) => {\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\r\n      showMessage: true,\r\n      contactList: this.state.contactList.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact),\r\n      allContact: this.state.allContact.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact)\r\n    })\r\n  };\r\n  onContactSelect = (data) => {\r\n    data.selected = !data.selected;\r\n    let selectedContacts = 0;\r\n    const contactList = this.state.contactList.map(contact => {\r\n        if (contact.selected) {\r\n          selectedContacts++;\r\n        }\r\n        if (contact.id === data.id) {\r\n          if (contact.selected) {\r\n            selectedContacts++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return contact;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedContacts: selectedContacts,\r\n      contactList: contactList\r\n    });\r\n\r\n  };\r\n\r\n\r\n  onAddContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n  onFilterOptionSelect = (option) => {\r\n    switch (option.name) {\r\n      case 'All contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n        break;\r\n      }\r\n      case 'Frequently contacted': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\r\n        });\r\n        break;\r\n      }\r\n      case 'Starred contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.starred)\r\n        });\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n\r\n  };\r\n  onSaveContact = (data) => {\r\n    let isNew = true;\r\n    const contactList = this.state.allContact.map((contact) => {\r\n      if (contact.id === data.id) {\r\n        isNew = false;\r\n        return data\r\n      } else {\r\n        return contact\r\n      }\r\n    });\r\n    if (isNew) {\r\n      contactList.push(data);\r\n    }\r\n    this.setState({\r\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\r\n      showMessage: true,\r\n      contactList: contactList,\r\n      allContact: contactList\r\n    });\r\n    // this.onFilterOptionSelect(this.state.filterOption);\r\n  };\r\n  onDeleteContact = (data) => {\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\r\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\r\n    })\r\n  };\r\n  onDeleteSelectedContact = () => {\r\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: contacts,\r\n      contactList: contacts,\r\n      selectedContacts: 0\r\n    })\r\n  };\r\n  filterContact = (userName) => {\r\n    const {filterOption} = this.state;\r\n    if (userName === '') {\r\n      this.setState({contactList: this.state.allContact});\r\n    } else {\r\n      const filterContact = this.state.allContact.filter((contact) =>\r\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\r\n      if (filterOption === 'All contacts') {\r\n        this.setState({contactList: filterContact});\r\n      } else if (filterOption === 'Frequently contacted') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\r\n\r\n      } else if (filterOption === 'Starred contacts') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\r\n      }\r\n    }\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: true\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: contactList.length,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n  getUnselectedAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: false\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: 0,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      noContentFoundMessage: 'No Contact found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      selectedSectionId: 1,\r\n      drawerState: false,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert.johnson@example.com',\r\n        avatar: 'https://via.placeholder.com/150x150'\r\n      },\r\n      searchUser: '',\r\n      filterOption: 'All contacts',\r\n      allContact: contactList,\r\n      contactList: contactList,\r\n      selectedContact: null,\r\n      selectedContacts: 0,\r\n      addContactState: false,\r\n    }\r\n  }\r\n\r\n  onAllContactSelect() {\r\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\r\n    if (selectAll) {\r\n      this.getAllContact();\r\n    } else {\r\n      this.getUnselectedAllContact();\r\n    }\r\n  }\r\n\r\n  updateContactUser(evt) {\r\n    this.setState({\r\n      searchUser: evt.target.value,\r\n    });\r\n    this.filterContact(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {user, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module\">\r\n\r\n          <div className=\"gx-d-block gx-d-lg-none\">\r\n            <Drawer\r\n              placement=\"left\"\r\n              closable={false}\r\n              visible={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.ContactSideBar()}\r\n            </Drawer>\r\n          </div>\r\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\r\n            {this.ContactSideBar(user)}\r\n          </div>\r\n\r\n          <div className=\"gx-module-box\">\r\n            <div className=\"gx-module-box-header\">\r\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\r\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\r\n                     onClick={this.onToggleDrawer.bind(this)}/>\r\n              </span>\r\n\r\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\r\n                               user={this.state.user}\r\n                               onChange={this.updateContactUser.bind(this)}\r\n                               value={this.state.searchUser}/>\r\n            </div>\r\n            <div className=\"gx-module-box-content\">\r\n\r\n              <div className=\"gx-module-box-topbar\">\r\n                <Checkbox color=\"primary\" className=\"gx-icon-btn\"\r\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\r\n                          checked={selectedContacts > 0}\r\n                          onChange={this.onAllContactSelect.bind(this)}\r\n                          value=\"SelectMail\"/>\r\n\r\n\r\n                {selectedContacts > 0 &&\r\n                <i className=\"gx-icon-btn icon icon-trash\" onClick={this.onDeleteSelectedContact.bind(this)}/>}\r\n\r\n              </div>\r\n              <CustomScrollbars className=\"gx-module-content-scroll\">\r\n                {contactList.length === 0 ?\r\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\r\n                    {noContentFoundMessage}\r\n                  </div>\r\n                  : <ContactList contactList={contactList}\r\n                                 addFavourite={this.addFavourite.bind(this)}\r\n                                 onContactSelect={this.onContactSelect.bind(this)}\r\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\r\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\r\n                }\r\n\r\n\r\n              </CustomScrollbars>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <AddContact open={addContactState} contact={{\r\n          'id': contactId++,\r\n          'name': '',\r\n          'thumb': '',\r\n          'email': '',\r\n          'phone': '',\r\n          'designation': '',\r\n          'selected': false,\r\n          'starred': false,\r\n          'frequently': false,\r\n        }} onSaveContact={this.onSaveContact}\r\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\r\n\r\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n"]},"metadata":{},"sourceType":"module"}