{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport contactList from \"./data/contactList\";\nimport ContactList from \"../../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\nimport AddContact from \"../../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport './index.css';\nvar contactId = 723812738;\nvar filterOptions = [{\n  id: 1,\n  name: 'All contacts',\n  icon: 'all-contacts'\n}, {\n  id: 2,\n  name: 'Frequently contacted',\n  icon: 'frequent'\n}, {\n  id: 3,\n  name: 'Starred contacts',\n  icon: 'star'\n}];\n\nvar Contact = /*#__PURE__*/function (_Component) {\n  _inherits(Contact, _Component);\n\n  var _super = _createSuper(Contact);\n\n  function Contact() {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"ContactSideBar\", function (user) {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-contacts gx-mr-4\"\n      }), __jsx(\"span\", null, __jsx(IntlMessages, {\n        id: \"chat.contacts\"\n      })))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: _this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New Contact\"))), __jsx(\"div\", {\n        className: \"gx-module-side-nav\"\n      }, __jsx(\"ul\", {\n        className: \"gx-module-nav\"\n      }, filterOptions.map(function (option) {\n        return __jsx(\"li\", {\n          key: option.id,\n          className: \"gx-nav-item\"\n        }, __jsx(\"span\", {\n          className: \"gx-link \".concat(option.id === _this.state.selectedSectionId ? 'active' : ''),\n          onClick: _this.onFilterOptionSelect.bind(_assertThisInitialized(_this), option)\n        }, __jsx(\"i\", {\n          className: \"icon icon-\".concat(option.icon)\n        }), __jsx(\"span\", null, option.name)));\n      }))))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addFavourite\", function (data) {\n      _this.setState({\n        alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\n        showMessage: true,\n        contactList: _this.state.contactList.map(function (contact) {\n          return contact.id === data.id ? _objectSpread(_objectSpread({}, contact), {}, {\n            starred: !data.starred\n          }) : contact;\n        }),\n        allContact: _this.state.allContact.map(function (contact) {\n          return contact.id === data.id ? _objectSpread(_objectSpread({}, contact), {}, {\n            starred: !data.starred\n          }) : contact;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactSelect\", function (data) {\n      data.selected = !data.selected;\n      var selectedContacts = 0;\n\n      var contactList = _this.state.contactList.map(function (contact) {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      _this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddContact\", function () {\n      _this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactClose\", function () {\n      _this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterOptionSelect\", function (option) {\n      switch (option.name) {\n        case 'All contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact\n            });\n\n            break;\n          }\n\n        case 'Frequently contacted':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.frequently;\n              })\n            });\n\n            break;\n          }\n\n        case 'Starred contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.starred;\n              })\n            });\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveContact\", function (data) {\n      var isNew = true;\n\n      var contactList = _this.state.allContact.map(function (contact) {\n        if (contact.id === data.id) {\n          isNew = false;\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      if (isNew) {\n        contactList.push(data);\n      }\n\n      _this.setState({\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n        showMessage: true,\n        contactList: contactList,\n        allContact: contactList\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteContact\", function (data) {\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        }),\n        contactList: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteSelectedContact\", function () {\n      var contacts = _this.state.allContact.filter(function (contact) {\n        return !contact.selected;\n      });\n\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterContact\", function (userName) {\n      var filterOption = _this.state.filterOption;\n\n      if (userName === '') {\n        _this.setState({\n          contactList: _this.state.allContact\n        });\n      } else {\n        var filterContact = _this.state.allContact.filter(function (contact) {\n          return contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1;\n        });\n\n        if (filterOption === 'All contacts') {\n          _this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.frequently;\n            })\n          });\n        } else if (filterOption === 'Starred contacts') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.starred;\n            })\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRequestClose\", function () {\n      _this.setState({\n        showMessage: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAllContact\", function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread(_objectSpread({}, contact), {}, {\n          selected: true\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnselectedAllContact\", function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread(_objectSpread({}, contact), {}, {\n          selected: false\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"onAllContactSelect\",\n    value: function onAllContactSelect() {\n      var selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n      if (selectAll) {\n        this.getAllContact();\n      } else {\n        this.getUnselectedAllContact();\n      }\n    }\n  }, {\n    key: \"updateContactUser\",\n    value: function updateContactUser(evt) {\n      this.setState({\n        searchUser: evt.target.value\n      });\n      this.filterContact(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          contactList = _this$state.contactList,\n          addContactState = _this$state.addContactState,\n          drawerState = _this$state.drawerState,\n          selectedContacts = _this$state.selectedContacts,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      return __jsx(\"div\", {\n        className: \"gx-main-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-app-module\"\n      }, __jsx(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\"\n      }, __jsx(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this)\n      }, this.ContactSideBar())), __jsx(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n      }, this.ContactSideBar(user)), __jsx(\"div\", {\n        className: \"gx-module-box\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-header\"\n      }, __jsx(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this)\n      })), __jsx(AppModuleHeader, {\n        placeholder: \"Search contact\",\n        notification: false,\n        apps: false,\n        user: this.state.user,\n        onChange: this.updateContactUser.bind(this),\n        value: this.state.searchUser\n      })), __jsx(\"div\", {\n        className: \"gx-module-box-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-topbar\"\n      }, __jsx(Checkbox, {\n        color: \"primary\",\n        className: \"gx-icon-btn\",\n        indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n        checked: selectedContacts > 0,\n        onChange: this.onAllContactSelect.bind(this),\n        value: \"SelectMail\"\n      }), selectedContacts > 0 && __jsx(\"i\", {\n        className: \"gx-icon-btn icon icon-trash\",\n        onClick: this.onDeleteSelectedContact.bind(this)\n      })), __jsx(CustomScrollbars, {\n        className: \"gx-module-content-scroll\"\n      }, contactList.length === 0 ? __jsx(\"div\", {\n        className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\"\n      }, noContentFoundMessage) : __jsx(ContactList, {\n        contactList: contactList,\n        addFavourite: this.addFavourite.bind(this),\n        onContactSelect: this.onContactSelect.bind(this),\n        onDeleteContact: this.onDeleteContact.bind(this),\n        onSaveContact: this.onSaveContact.bind(this)\n      }))))), __jsx(AddContact, {\n        open: addContactState,\n        contact: {\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false\n        },\n        onSaveContact: this.onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact\n      }), showMessage && message.info(__jsx(\"span\", {\n        id: \"message-id\"\n      }, alertMessage), 3, this.handleRequestClose));\n    }\n  }]);\n\n  return Contact;\n}(Component);\n\nexport default Contact;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/inbuiltApps/Contact/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","contactId","filterOptions","id","name","icon","Contact","user","onAddContact","map","option","state","selectedSectionId","onFilterOptionSelect","bind","data","setState","alertMessage","starred","showMessage","contact","allContact","selected","selectedContacts","addContactState","filterOption","filter","frequently","isNew","push","contacts","userName","filterContact","toLowerCase","indexOf","length","noContentFoundMessage","drawerState","email","avatar","searchUser","selectedContact","selectAll","getAllContact","getUnselectedAllContact","evt","target","value","onToggleDrawer","ContactSideBar","updateContactUser","onAllContactSelect","onDeleteSelectedContact","addFavourite","onContactSelect","onDeleteContact","onSaveContact","onContactClose","info","handleRequestClose"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Button, Checkbox, Drawer, message} from \"antd\";\r\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\r\n\r\nimport contactList from \"./data/contactList\";\r\nimport ContactList from \"../../../app/components/contact/ContactList\";\r\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\r\nimport AddContact from \"../../../app/components/contact/AddContact\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\nimport './index.css';\r\n\r\nlet contactId = 723812738;\r\n\r\nconst filterOptions = [\r\n  {\r\n    id: 1,\r\n    name: 'All contacts',\r\n    icon: 'all-contacts'\r\n  }, {\r\n    id: 2,\r\n    name: 'Frequently contacted',\r\n    icon: 'frequent'\r\n\r\n  }, {\r\n\r\n    id: 3,\r\n    name: 'Starred contacts',\r\n    icon: 'star'\r\n  }\r\n];\r\n\r\nclass Contact extends Component {\r\n\r\n  ContactSideBar = (user) => {\r\n    return <div className=\"gx-module-side\">\r\n      <div className=\"gx-module-side-header\">\r\n        <div className=\"gx-module-logo\">\r\n          <i className=\"icon icon-contacts gx-mr-4\"/>\r\n          <span><IntlMessages id=\"chat.contacts\"/></span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"gx-module-side-content\">\r\n        <CustomScrollbars className=\"gx-module-side-scroll\">\r\n          <div className=\"gx-module-add-task\">\r\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\r\n                    onClick={this.onAddContact}>\r\n              <i className=\"icon icon-add gx-mr-2\"/>\r\n              <span>Add New Contact</span>\r\n            </Button>\r\n          </div>\r\n          <div className=\"gx-module-side-nav\">\r\n            <ul className=\"gx-module-nav\">\r\n              {filterOptions.map(option => <li key={option.id} className=\"gx-nav-item\">\r\n                  <span\r\n                    className={`gx-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\r\n                    this.onFilterOptionSelect.bind(this, option)\r\n                  }>\r\n                    <i className={`icon icon-${option.icon}`}/>\r\n                    <span>{option.name}</span>\r\n                  </span>\r\n                </li>\r\n              )}\r\n\r\n            </ul>\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n\r\n  };\r\n\r\n  addFavourite = (data) => {\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\r\n      showMessage: true,\r\n      contactList: this.state.contactList.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact),\r\n      allContact: this.state.allContact.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact)\r\n    })\r\n  };\r\n  onContactSelect = (data) => {\r\n    data.selected = !data.selected;\r\n    let selectedContacts = 0;\r\n    const contactList = this.state.contactList.map(contact => {\r\n        if (contact.selected) {\r\n          selectedContacts++;\r\n        }\r\n        if (contact.id === data.id) {\r\n          if (contact.selected) {\r\n            selectedContacts++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return contact;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedContacts: selectedContacts,\r\n      contactList: contactList\r\n    });\r\n\r\n  };\r\n\r\n\r\n  onAddContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n  onFilterOptionSelect = (option) => {\r\n    switch (option.name) {\r\n      case 'All contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n        break;\r\n      }\r\n      case 'Frequently contacted': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\r\n        });\r\n        break;\r\n      }\r\n      case 'Starred contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.starred)\r\n        });\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n\r\n  };\r\n  onSaveContact = (data) => {\r\n    let isNew = true;\r\n    const contactList = this.state.allContact.map((contact) => {\r\n      if (contact.id === data.id) {\r\n        isNew = false;\r\n        return data\r\n      } else {\r\n        return contact\r\n      }\r\n    });\r\n    if (isNew) {\r\n      contactList.push(data);\r\n    }\r\n    this.setState({\r\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\r\n      showMessage: true,\r\n      contactList: contactList,\r\n      allContact: contactList\r\n    });\r\n    // this.onFilterOptionSelect(this.state.filterOption);\r\n  };\r\n  onDeleteContact = (data) => {\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\r\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\r\n    })\r\n  };\r\n  onDeleteSelectedContact = () => {\r\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: contacts,\r\n      contactList: contacts,\r\n      selectedContacts: 0\r\n    })\r\n  };\r\n  filterContact = (userName) => {\r\n    const {filterOption} = this.state;\r\n    if (userName === '') {\r\n      this.setState({contactList: this.state.allContact});\r\n    } else {\r\n      const filterContact = this.state.allContact.filter((contact) =>\r\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\r\n      if (filterOption === 'All contacts') {\r\n        this.setState({contactList: filterContact});\r\n      } else if (filterOption === 'Frequently contacted') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\r\n\r\n      } else if (filterOption === 'Starred contacts') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\r\n      }\r\n    }\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: true\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: contactList.length,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n  getUnselectedAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: false\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: 0,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      noContentFoundMessage: 'No Contact found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      selectedSectionId: 1,\r\n      drawerState: false,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert.johnson@example.com',\r\n        avatar: 'https://via.placeholder.com/150x150'\r\n      },\r\n      searchUser: '',\r\n      filterOption: 'All contacts',\r\n      allContact: contactList,\r\n      contactList: contactList,\r\n      selectedContact: null,\r\n      selectedContacts: 0,\r\n      addContactState: false,\r\n    }\r\n  }\r\n\r\n  onAllContactSelect() {\r\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\r\n    if (selectAll) {\r\n      this.getAllContact();\r\n    } else {\r\n      this.getUnselectedAllContact();\r\n    }\r\n  }\r\n\r\n  updateContactUser(evt) {\r\n    this.setState({\r\n      searchUser: evt.target.value,\r\n    });\r\n    this.filterContact(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {user, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module\">\r\n\r\n          <div className=\"gx-d-block gx-d-lg-none\">\r\n            <Drawer\r\n              placement=\"left\"\r\n              closable={false}\r\n              visible={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.ContactSideBar()}\r\n            </Drawer>\r\n          </div>\r\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\r\n            {this.ContactSideBar(user)}\r\n          </div>\r\n\r\n          <div className=\"gx-module-box\">\r\n            <div className=\"gx-module-box-header\">\r\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\r\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\r\n                     onClick={this.onToggleDrawer.bind(this)}/>\r\n              </span>\r\n\r\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\r\n                               user={this.state.user}\r\n                               onChange={this.updateContactUser.bind(this)}\r\n                               value={this.state.searchUser}/>\r\n            </div>\r\n            <div className=\"gx-module-box-content\">\r\n\r\n              <div className=\"gx-module-box-topbar\">\r\n                <Checkbox color=\"primary\" className=\"gx-icon-btn\"\r\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\r\n                          checked={selectedContacts > 0}\r\n                          onChange={this.onAllContactSelect.bind(this)}\r\n                          value=\"SelectMail\"/>\r\n\r\n\r\n                {selectedContacts > 0 &&\r\n                <i className=\"gx-icon-btn icon icon-trash\" onClick={this.onDeleteSelectedContact.bind(this)}/>}\r\n\r\n              </div>\r\n              <CustomScrollbars className=\"gx-module-content-scroll\">\r\n                {contactList.length === 0 ?\r\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\r\n                    {noContentFoundMessage}\r\n                  </div>\r\n                  : <ContactList contactList={contactList}\r\n                                 addFavourite={this.addFavourite.bind(this)}\r\n                                 onContactSelect={this.onContactSelect.bind(this)}\r\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\r\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\r\n                }\r\n\r\n\r\n              </CustomScrollbars>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <AddContact open={addContactState} contact={{\r\n          'id': contactId++,\r\n          'name': '',\r\n          'thumb': '',\r\n          'email': '',\r\n          'phone': '',\r\n          'designation': '',\r\n          'selected': false,\r\n          'starred': false,\r\n          'frequently': false,\r\n        }} onSaveContact={this.onSaveContact}\r\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\r\n\r\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n"]},"metadata":{},"sourceType":"module"}