{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Form, Input, Button, Select, Card } from 'antd';\nimport React from \"react\";\nconst {\n  Option\n} = Select;\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\n\nconst CoordinatedControls = () => {\n  const [form] = Form.useForm();\n\n  const onGenderChange = value => {\n    switch (value) {\n      case 'male':\n        form.setFieldsValue({\n          note: 'Hi, man!'\n        });\n        return;\n\n      case 'female':\n        form.setFieldsValue({\n          note: 'Hi, lady!'\n        });\n        return;\n\n      case 'other':\n        form.setFieldsValue({\n          note: 'Hi there!'\n        });\n    }\n  };\n\n  const onFinish = values => {\n    console.log(values);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const onFill = () => {\n    form.setFieldsValue({\n      note: 'Hello world!',\n      gender: 'male'\n    });\n  };\n\n  return __jsx(Card, {\n    className: \"gx-card\",\n    title: \"Coordinated Controls\"\n  }, __jsx(Form, _extends({}, layout, {\n    form: form,\n    name: \"control-hooks\",\n    onFinish: onFinish\n  }), __jsx(Form.Item, {\n    name: \"note\",\n    label: \"Note\",\n    rules: [{\n      required: true\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    name: \"gender\",\n    label: \"Gender\",\n    rules: [{\n      required: true\n    }]\n  }, __jsx(Select, {\n    placeholder: \"Select a option and change input text above\",\n    onChange: onGenderChange,\n    allowClear: true\n  }, __jsx(Option, {\n    value: \"male\"\n  }, \"male\"), __jsx(Option, {\n    value: \"female\"\n  }, \"female\"), __jsx(Option, {\n    value: \"other\"\n  }, \"other\"))), __jsx(Form.Item, {\n    noStyle: true,\n    shouldUpdate: (prevValues, currentValues) => prevValues.gender !== currentValues.gender\n  }, ({\n    getFieldValue\n  }) => getFieldValue('gender') === 'other' ? __jsx(Form.Item, {\n    name: \"customizeGender\",\n    label: \"Customize Gender\",\n    rules: [{\n      required: true\n    }]\n  }, __jsx(Input, null)) : null), __jsx(Form.Item, tailLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Submit\"), __jsx(Button, {\n    htmlType: \"button\",\n    onClick: onReset\n  }, \"Reset\"), __jsx(Button, {\n    type: \"link\",\n    htmlType: \"button\",\n    onClick: onFill\n  }, \"Fill form\"))));\n};\n\nexport default CoordinatedControls;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/components/dataEntry/Form/CoordinatedControls.js"],"names":["Form","Input","Button","Select","Card","React","Option","layout","labelCol","span","wrapperCol","tailLayout","offset","CoordinatedControls","form","useForm","onGenderChange","value","setFieldsValue","note","onFinish","values","console","log","onReset","resetFields","onFill","gender","required","prevValues","currentValues","getFieldValue"],"mappings":"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","sourcesContent":["import { Form, Input, Button, Select,Card } from 'antd';\r\nimport React from \"react\";\r\n\r\nconst { Option } = Select;\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst CoordinatedControls = () => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onGenderChange = value => {\r\n    switch (value) {\r\n      case 'male':\r\n        form.setFieldsValue({\r\n          note: 'Hi, man!',\r\n        });\r\n        return;\r\n\r\n      case 'female':\r\n        form.setFieldsValue({\r\n          note: 'Hi, lady!',\r\n        });\r\n        return;\r\n\r\n      case 'other':\r\n        form.setFieldsValue({\r\n          note: 'Hi there!',\r\n        });\r\n    }\r\n  };\r\n\r\n  const onFinish = values => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const onFill = () => {\r\n    form.setFieldsValue({\r\n      note: 'Hello world!',\r\n      gender: 'male',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card className=\"gx-card\" title=\"Coordinated Controls\">\r\n    <Form {...layout} form={form} name=\"control-hooks\" onFinish={onFinish}>\r\n      <Form.Item\r\n        name=\"note\"\r\n        label=\"Note\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"gender\"\r\n        label=\"Gender\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Select\r\n          placeholder=\"Select a option and change input text above\"\r\n          onChange={onGenderChange}\r\n          allowClear\r\n        >\r\n          <Option value=\"male\">male</Option>\r\n          <Option value=\"female\">female</Option>\r\n          <Option value=\"other\">other</Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item\r\n        noStyle\r\n        shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\r\n      >\r\n        {({ getFieldValue }) =>\r\n          getFieldValue('gender') === 'other' ? (\r\n            <Form.Item\r\n              name=\"customizeGender\"\r\n              label=\"Customize Gender\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n          ) : null\r\n        }\r\n      </Form.Item>\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n        <Button htmlType=\"button\" onClick={onReset}>\r\n          Reset\r\n        </Button>\r\n        <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\r\n          Fill form\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n    </Card>\r\n  );\r\n};\r\nexport default CoordinatedControls;\r\n"]},"metadata":{},"sourceType":"module"}