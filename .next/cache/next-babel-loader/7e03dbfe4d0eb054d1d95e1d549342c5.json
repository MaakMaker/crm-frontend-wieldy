{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Button, Input, message, Modal, Upload } from \"antd\";\nimport Moment from \"moment\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\nvar TextArea = Input.TextArea;\nvar props = {\n  name: 'file',\n  action: '//jsonplaceholder.typicode.com/posts/',\n  headers: {\n    authorization: 'authorization-text'\n  },\n  onChange: function onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n\n    if (info.file.status === 'done') {\n      message.success(\"\".concat(info.file.name, \" file uploaded successfully\"));\n    } else if (info.file.status === 'error') {\n      message.error(\"\".concat(info.file.name, \" file upload failed.\"));\n    }\n  }\n};\n\nvar ComposeMail = /*#__PURE__*/function (_React$Component) {\n  _inherits(ComposeMail, _React$Component);\n\n  var _super = _createSuper(ComposeMail);\n\n  function ComposeMail() {\n    var _this;\n\n    _classCallCheck(this, ComposeMail);\n\n    _this = _super.call(this);\n    _this.state = {\n      to: '',\n      cc: '',\n      bcc: '',\n      subject: '',\n      message: ''\n    };\n    return _this;\n  }\n\n  _createClass(ComposeMail, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          onMailSend = _this$props.onMailSend,\n          onClose = _this$props.onClose,\n          user = _this$props.user;\n      var _this$state = this.state,\n          to = _this$state.to,\n          subject = _this$state.subject,\n          message = _this$state.message;\n      return __jsx(Modal, {\n        onCancel: onClose,\n        visible: this.props.open,\n        title: __jsx(IntlMessages, {\n          id: \"mail.title\"\n        }),\n        closable: false,\n        onOk: function onOk() {\n          if (to === '') return;\n          onClose();\n          onMailSend({\n            'id': '15453a06c08fb021776',\n            'from': {\n              'name': user.name,\n              'avatar': user.avatar,\n              'email': user.email\n            },\n            'to': [{\n              'name': to,\n              'email': to\n            }],\n            'subject': subject,\n            'message': message,\n            'time': Moment().format('DD MMM'),\n            'read': false,\n            'starred': false,\n            'important': false,\n            'hasAttachments': false,\n            'folder': 1,\n            'selected': false,\n            'labels': []\n          });\n        },\n        style: {\n          zIndex: 2600\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        placeholder: \"To*\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            to: event.target.value\n          });\n        },\n        defaultValue: to,\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        placeholder: \"Subject\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            subject: event.target.value\n          });\n        },\n        value: subject,\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(TextArea, {\n        placeholder: \"Message\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            message: event.target.value\n          });\n        },\n        value: message,\n        autosize: {\n          minRows: 2,\n          maxRows: 6\n        },\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Upload, props, __jsx(Button, {\n        type: \"primary\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-attachment\"\n      }), \" Attach File\"))));\n    }\n  }]);\n\n  return ComposeMail;\n}(React.Component);\n\nexport default ComposeMail;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/app/components/mail/Compose/index.js"],"names":["React","Button","Input","message","Modal","Upload","Moment","IntlMessages","TextArea","props","name","action","headers","authorization","onChange","info","file","status","console","log","fileList","success","error","ComposeMail","state","to","cc","bcc","subject","onMailSend","onClose","user","open","avatar","email","format","zIndex","event","setState","target","value","minRows","maxRows","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Button, Input, message, Modal, Upload} from \"antd\";\r\nimport Moment from \"moment\";\r\n\r\nimport IntlMessages from \"../../../../util/IntlMessages\";\r\n\r\nconst {TextArea} = Input;\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: '//jsonplaceholder.typicode.com/posts/',\r\n  headers: {\r\n    authorization: 'authorization-text',\r\n  },\r\n  onChange(info) {\r\n    if (info.file.status !== 'uploading') {\r\n      console.log(info.file, info.fileList);\r\n    }\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} file uploaded successfully`);\r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n    }\r\n  },\r\n};\r\n\r\nclass ComposeMail extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      to: '',\r\n      cc: '',\r\n      bcc: '',\r\n      subject: '',\r\n      message: '',\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {onMailSend, onClose, user} = this.props;\r\n    const {to, subject, message} = this.state;\r\n    return (\r\n      <Modal onCancel={onClose} visible={this.props.open}\r\n             title={<IntlMessages id=\"mail.title\"/>}\r\n             closable={false}\r\n             onOk={() => {\r\n               if (to === '')\r\n                 return;\r\n               onClose();\r\n               onMailSend(\r\n                 {\r\n                   'id': '15453a06c08fb021776',\r\n                   'from': {\r\n                     'name': user.name,\r\n                     'avatar': user.avatar,\r\n                     'email': user.email\r\n                   },\r\n                   'to': [\r\n                     {\r\n                       'name': to,\r\n                       'email': to\r\n                     }\r\n                   ],\r\n                   'subject': subject,\r\n                   'message': message,\r\n                   'time': Moment().format('DD MMM'),\r\n                   'read': false,\r\n                   'starred': false,\r\n                   'important': false,\r\n                   'hasAttachments': false,\r\n                   'folder': 1,\r\n                   'selected': false,\r\n                   'labels': [],\r\n                 })\r\n\r\n             }}\r\n             style={{zIndex: 2600}}>\r\n        <div className=\"gx-form-group\">\r\n          <Input\r\n            placeholder=\"To*\"\r\n            onChange={(event) => this.setState({to: event.target.value})}\r\n            defaultValue={to}\r\n            margin=\"normal\"/>\r\n        </div>\r\n        <div className=\"gx-form-group\">\r\n          <Input\r\n            placeholder=\"Subject\"\r\n            onChange={(event) => this.setState({subject: event.target.value})}\r\n            value={subject}\r\n            margin=\"normal\"\r\n          />\r\n        </div>\r\n        <div className=\"gx-form-group\">\r\n          <TextArea\r\n            placeholder=\"Message\"\r\n            onChange={(event) => this.setState({message: event.target.value})}\r\n            value={message}\r\n            autosize={{minRows: 2, maxRows: 6}}\r\n            margin=\"normal\"/>\r\n        </div>\r\n\r\n        <div className=\"gx-form-group\">\r\n\r\n          <Upload {...props}>\r\n            <Button type=\"primary\">\r\n              <i className=\"icon icon-attachment\"/> Attach File\r\n            </Button>\r\n          </Upload>\r\n\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComposeMail;\r\n"]},"metadata":{},"sourceType":"module"}