{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { AutoComplete, Button, Card, Cascader, Checkbox, Col, Form, Input, Row, Select, Tooltip } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nconst {\n  Option\n} = Select;\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nconst Registration = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    console.log('Received values of form: ', values);\n  };\n\n  const prefixSelector = __jsx(Form.Item, {\n    name: \"prefix\",\n    noStyle: true\n  }, __jsx(Select, {\n    style: {\n      width: 70\n    }\n  }, __jsx(Option, {\n    value: \"86\"\n  }, \"+86\"), __jsx(Option, {\n    value: \"87\"\n  }, \"+87\")));\n\n  const {\n    0: autoCompleteResult,\n    1: setAutoCompleteResult\n  } = useState([]);\n\n  const onWebsiteChange = value => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map(website => ({\n    label: website,\n    value: website\n  }));\n  return __jsx(Card, {\n    className: \"gx-card\",\n    title: \"Registration Form\"\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"register\",\n    onFinish: onFinish,\n    initialValues: {\n      residence: ['zhejiang', 'hangzhou', 'xihu'],\n      prefix: '86'\n    },\n    scrollToFirstError: true\n  }), __jsx(Form.Item, {\n    name: \"email\",\n    label: \"E-mail\",\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    name: \"password\",\n    label: \"Password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }],\n    hasFeedback: true\n  }, __jsx(Input.Password, null)), __jsx(Form.Item, {\n    name: \"confirm\",\n    label: \"Confirm Password\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The two passwords that you entered do not match!');\n      }\n\n    })]\n  }, __jsx(Input.Password, null)), __jsx(Form.Item, {\n    name: \"nickname\",\n    label: __jsx(\"span\", null, \"Nickname\\xA0\", __jsx(Tooltip, {\n      title: \"What do you want others to call you?\"\n    }, __jsx(QuestionCircleOutlined, null))),\n    rules: [{\n      required: true,\n      message: 'Please input your nickname!',\n      whitespace: true\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    name: \"residence\",\n    label: \"Habitual Residence\",\n    rules: [{\n      type: 'array',\n      required: true,\n      message: 'Please select your habitual residence!'\n    }]\n  }, __jsx(Cascader, {\n    options: residences\n  })), __jsx(Form.Item, {\n    name: \"phone\",\n    label: \"Phone Number\",\n    rules: [{\n      required: true,\n      message: 'Please input your phone number!'\n    }]\n  }, __jsx(Input, {\n    addonBefore: prefixSelector,\n    style: {\n      width: '100%'\n    }\n  })), __jsx(Form.Item, {\n    name: \"website\",\n    label: \"Website\",\n    rules: [{\n      required: true,\n      message: 'Please input website!'\n    }]\n  }, __jsx(AutoComplete, {\n    options: websiteOptions,\n    onChange: onWebsiteChange,\n    placeholder: \"website\"\n  }, __jsx(Input, null))), __jsx(Form.Item, {\n    label: \"Captcha\",\n    extra: \"We must make sure that your are a human.\"\n  }, __jsx(Row, {\n    gutter: 8\n  }, __jsx(Col, {\n    span: 12\n  }, __jsx(Form.Item, {\n    name: \"captcha\",\n    noStyle: true,\n    rules: [{\n      required: true,\n      message: 'Please input the captcha you got!'\n    }]\n  }, __jsx(Input, null))), __jsx(Col, {\n    span: 12\n  }, __jsx(Button, null, \"Get captcha\")))), __jsx(Form.Item, _extends({\n    name: \"agreement\",\n    valuePropName: \"checked\",\n    rules: [{\n      validator: (_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement')\n    }]\n  }, tailFormItemLayout), __jsx(Checkbox, null, \"I have read the \", __jsx(\"a\", {\n    href: \"\"\n  }, \"agreement\"))), __jsx(Form.Item, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Register\"))));\n};\n\nexport default Registration;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/components/dataEntry/Form/Registration.js"],"names":["React","useState","AutoComplete","Button","Card","Cascader","Checkbox","Col","Form","Input","Row","Select","Tooltip","QuestionCircleOutlined","Option","residences","value","label","children","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","Registration","form","useForm","onFinish","values","console","log","prefixSelector","width","autoCompleteResult","setAutoCompleteResult","onWebsiteChange","map","domain","websiteOptions","website","residence","prefix","type","message","required","getFieldValue","validator","rule","Promise","resolve","reject","whitespace","_"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {AutoComplete, Button, Card, Cascader, Checkbox, Col, Form, Input, Row, Select, Tooltip,} from 'antd';\r\nimport {QuestionCircleOutlined} from '@ant-design/icons';\r\n\r\nconst {Option} = Select;\r\n\r\nconst residences = [\r\n  {\r\n    value: 'zhejiang',\r\n    label: 'Zhejiang',\r\n    children: [\r\n      {\r\n        value: 'hangzhou',\r\n        label: 'Hangzhou',\r\n        children: [\r\n          {\r\n            value: 'xihu',\r\n            label: 'West Lake',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    value: 'jiangsu',\r\n    label: 'Jiangsu',\r\n    children: [\r\n      {\r\n        value: 'nanjing',\r\n        label: 'Nanjing',\r\n        children: [\r\n          {\r\n            value: 'zhonghuamen',\r\n            label: 'Zhong Hua Men',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {span: 24},\r\n    sm: {span: 8},\r\n  },\r\n  wrapperCol: {\r\n    xs: {span: 24},\r\n    sm: {span: 16},\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nconst Registration = () => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = values => {\r\n    console.log('Received values of form: ', values);\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select style={{width: 70}}>\r\n        <Option value=\"86\">+86</Option>\r\n        <Option value=\"87\">+87</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\r\n\r\n  const onWebsiteChange = value => {\r\n    if (!value) {\r\n      setAutoCompleteResult([]);\r\n    } else {\r\n      setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\r\n    }\r\n  };\r\n\r\n  const websiteOptions = autoCompleteResult.map(website => ({\r\n    label: website,\r\n    value: website,\r\n  }));\r\n\r\n  return (\r\n    <Card className=\"gx-card\" title=\"Registration Form\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={onFinish}\r\n        initialValues={{\r\n          residence: ['zhejiang', 'hangzhou', 'xihu'],\r\n          prefix: '86',\r\n        }}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"E-mail\"\r\n          rules={[\r\n            {\r\n              type: 'email',\r\n              message: 'The input is not valid E-mail!',\r\n            },\r\n            {\r\n              required: true,\r\n              message: 'Please input your E-mail!',\r\n            },\r\n          ]}\r\n        >\r\n          <Input/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please input your password!',\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input.Password/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"confirm\"\r\n          label=\"Confirm Password\"\r\n          dependencies={['password']}\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please confirm your password!',\r\n            },\r\n            ({getFieldValue}) => ({\r\n              validator(rule, value) {\r\n                if (!value || getFieldValue('password') === value) {\r\n                  return Promise.resolve();\r\n                }\r\n                return Promise.reject('The two passwords that you entered do not match!');\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.Password/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"nickname\"\r\n          label={\r\n            <span>\r\n            Nickname&nbsp;\r\n              <Tooltip title=\"What do you want others to call you?\">\r\n              <QuestionCircleOutlined/>\r\n            </Tooltip>\r\n          </span>\r\n          }\r\n          rules={[{required: true, message: 'Please input your nickname!', whitespace: true}]}\r\n        >\r\n          <Input/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"residence\"\r\n          label=\"Habitual Residence\"\r\n          rules={[\r\n            {type: 'array', required: true, message: 'Please select your habitual residence!'},\r\n          ]}\r\n        >\r\n          <Cascader options={residences}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"phone\"\r\n          label=\"Phone Number\"\r\n          rules={[{required: true, message: 'Please input your phone number!'}]}\r\n        >\r\n          <Input addonBefore={prefixSelector} style={{width: '100%'}}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"website\"\r\n          label=\"Website\"\r\n          rules={[{required: true, message: 'Please input website!'}]}\r\n        >\r\n          <AutoComplete options={websiteOptions} onChange={onWebsiteChange} placeholder=\"website\">\r\n            <Input/>\r\n          </AutoComplete>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n          <Row gutter={8}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                name=\"captcha\"\r\n                noStyle\r\n                rules={[{required: true, message: 'Please input the captcha you got!'}]}\r\n              >\r\n                <Input/>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button>Get captcha</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {validator: (_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement')},\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            I have read the <a href=\"\">agreement</a>\r\n          </Checkbox>\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Registration;\r\n\r\n"]},"metadata":{},"sourceType":"module"}