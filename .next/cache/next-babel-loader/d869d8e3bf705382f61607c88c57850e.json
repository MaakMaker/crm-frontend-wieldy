{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Card, Checkbox, Form, Input, message } from \"antd\";\nimport { LockOutlined, UserOutlined } from '@ant-design/icons';\nimport { hideMessage, showAuthLoader, userFacebookSignIn, userGithubSignIn, userGoogleSignIn, userSignIn, userTwitterSignIn } from \"../../../../redux/actions/Auth\";\nimport \"./horizontalLoginForm.css\";\nimport CircularProgress from \"../../../../app/components/CircularProgress/index\";\nconst FormItem = Form.Item;\n\nclass HorizontalLoginForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: 'demo@example.com',\n      password: 'demo#123'\n    };\n  }\n\n  render() {\n    const {\n      showMessage,\n      loader,\n      alertMessage\n    } = this.props;\n    return __jsx(Card, {\n      className: \"gx-card\",\n      title: \"Horizontal Login Form\"\n    }, __jsx(Form, {\n      initialValues: {\n        remember: true\n      },\n      name: \"basic\",\n      onFinish: this.onFinish,\n      onFinishFailed: this.onFinishFailed,\n      className: \"gx-login-form gx-form-row0\"\n    }, __jsx(FormItem, {\n      rules: [{\n        required: true,\n        message: 'Please input your E-mail!'\n      }],\n      name: \"email\",\n      initialValue: \"demo@example.com\"\n    }, __jsx(Input, {\n      prefix: __jsx(UserOutlined, {\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        }\n      }),\n      placeholder: \"Email\"\n    })), __jsx(FormItem, {\n      rules: [{\n        required: true,\n        message: 'Please input your Password!'\n      }],\n      name: \"password\",\n      initialValue: \"demo#123\"\n    }, __jsx(Input, {\n      prefix: __jsx(LockOutlined, {\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        }\n      }),\n      type: \"password\",\n      placeholder: \"Password\"\n    })), __jsx(FormItem, {\n      name: \"remember\",\n      valuePropName: \"checked\"\n    }, __jsx(\"span\", {\n      className: \"gx-d-block gx-mb-2\"\n    }, __jsx(Checkbox, null, \"Remember me\"), __jsx(\"span\", {\n      className: \"gx-link login-form-forgot\"\n    }, \"Forgot password\")), __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button gx-mt-1\"\n    }, \"Log in\"), __jsx(\"span\", {\n      className: \"gx-d-block gx-mt-2\"\n    }, \"Or \", __jsx(\"span\", {\n      className: \"gx-link\"\n    }, \"register now!\")))), loader && __jsx(\"div\", {\n      className: \"gx-loader-view\"\n    }, __jsx(CircularProgress, null)), showMessage && message.error(alertMessage));\n  }\n\n}\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    loader,\n    alertMessage,\n    showMessage,\n    authUser\n  } = auth;\n  return {\n    loader,\n    alertMessage,\n    showMessage,\n    authUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  userSignIn,\n  hideMessage,\n  showAuthLoader,\n  userFacebookSignIn,\n  userGoogleSignIn,\n  userGithubSignIn,\n  userTwitterSignIn\n})(HorizontalLoginForm);","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/components/dataEntry/Form/HorizontalLoginForm.js"],"names":["React","Component","connect","Button","Card","Checkbox","Form","Input","message","LockOutlined","UserOutlined","hideMessage","showAuthLoader","userFacebookSignIn","userGithubSignIn","userGoogleSignIn","userSignIn","userTwitterSignIn","CircularProgress","FormItem","Item","HorizontalLoginForm","constructor","state","email","password","render","showMessage","loader","alertMessage","props","remember","onFinish","onFinishFailed","required","color","error","mapStateToProps","auth","authUser"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Card, Checkbox, Form, Input, message} from \"antd\";\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {\r\n  hideMessage,\r\n  showAuthLoader,\r\n  userFacebookSignIn,\r\n  userGithubSignIn,\r\n  userGoogleSignIn,\r\n  userSignIn,\r\n  userTwitterSignIn\r\n} from \"../../../../redux/actions/Auth\";\r\nimport \"./horizontalLoginForm.css\";\r\nimport CircularProgress from \"../../../../app/components/CircularProgress/index\";\r\n\r\n\r\nconst FormItem = Form.Item;\r\n\r\nclass HorizontalLoginForm extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: 'demo@example.com',\r\n      password: 'demo#123'\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const {showMessage, loader, alertMessage} = this.props;\r\n\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Horizontal Login Form\">\r\n        <Form\r\n          initialValues={{remember: true}}\r\n          name=\"basic\"\r\n          onFinish={this.onFinish}\r\n          onFinishFailed={this.onFinishFailed}\r\n          className=\"gx-login-form gx-form-row0\">\r\n          <FormItem rules={[{required: true, message: 'Please input your E-mail!'}]}\r\n                    name=\"email\"\r\n                    initialValue=\"demo@example.com\">\r\n\r\n            <Input prefix={<UserOutlined style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                   placeholder=\"Email\"/>\r\n          </FormItem>\r\n          <FormItem rules={[{required: true, message: 'Please input your Password!'}]}\r\n                    name=\"password\"\r\n                    initialValue=\"demo#123\">\r\n\r\n            <Input prefix={<LockOutlined style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                   type=\"password\"\r\n                   placeholder=\"Password\"/>\r\n          </FormItem>\r\n          <FormItem name=\"remember\" valuePropName=\"checked\">\r\n            <span className='gx-d-block gx-mb-2'>\r\n              <Checkbox>Remember me</Checkbox>\r\n            <span className=\"gx-link login-form-forgot\">Forgot password</span>\r\n            </span>\r\n            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button gx-mt-1\">\r\n              Log in\r\n            </Button>\r\n            <span className='gx-d-block gx-mt-2'>\r\n            Or <span className=\"gx-link\">register now!</span>\r\n            </span>\r\n          </FormItem>\r\n        </Form>\r\n\r\n        {loader &&\r\n        <div className=\"gx-loader-view\">\r\n          <CircularProgress/>\r\n        </div>\r\n        }\r\n        {showMessage &&\r\n        message.error(alertMessage)}\r\n      </Card>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = ({auth}) => {\r\n  const {loader, alertMessage, showMessage, authUser} = auth;\r\n  return {loader, alertMessage, showMessage, authUser}\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  userSignIn,\r\n  hideMessage,\r\n  showAuthLoader,\r\n  userFacebookSignIn,\r\n  userGoogleSignIn,\r\n  userGithubSignIn,\r\n  userTwitterSignIn\r\n})(HorizontalLoginForm);\r\n"]},"metadata":{},"sourceType":"module"}