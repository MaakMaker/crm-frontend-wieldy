{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Avatar, Button, Drawer, Input, Tabs } from \"antd\";\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport Moment from \"moment\";\nimport ChatUserList from \"../../../app/components/chat/ChatUserList\";\nimport conversationList from \"./data/conversationList\";\nimport Conversation from \"../../../app/components/chat/Conversation\";\nimport users from \"./data/chatUsers\";\nimport ContactList from \"../../../app/components/chat/ContactList\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport SearchBox from \"../../../app/components/SearchBox\";\nimport CircularProgress from \"../../../app/components/CircularProgress\";\nimport './index.css';\nconst TabPane = Tabs.TabPane;\n\nclass Chat extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"filterContact\", userName => {\n      if (userName === '') {\n        return users.filter(user => !user.recent);\n      }\n\n      return users.filter(user => !user.recent && user.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n    });\n\n    _defineProperty(this, \"filterUsers\", userName => {\n      if (userName === '') {\n        return users.filter(user => user.recent);\n      }\n\n      return users.filter(user => user.recent && user.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n    });\n\n    _defineProperty(this, \"Communication\", () => {\n      const {\n        message,\n        selectedUser,\n        conversation\n      } = this.state;\n      const {\n        conversationData\n      } = conversation;\n      return __jsx(\"div\", {\n        className: \"gx-chat-main\"\n      }, __jsx(\"div\", {\n        className: \"gx-chat-main-header\"\n      }, __jsx(\"span\", {\n        className: \"gx-d-block gx-d-lg-none gx-chat-btn\"\n      }, __jsx(\"i\", {\n        className: \"gx-icon-btn icon icon-chat\",\n        onClick: this.onToggleDrawer.bind(this)\n      })), __jsx(\"div\", {\n        className: \"gx-chat-main-header-info\"\n      }, __jsx(\"div\", {\n        className: \"gx-chat-avatar gx-mr-2\"\n      }, __jsx(\"div\", {\n        className: \"gx-status-pos\"\n      }, __jsx(Avatar, {\n        src: selectedUser.thumb,\n        className: \"gx-rounded-circle gx-size-60\",\n        alt: \"\"\n      }), __jsx(\"span\", {\n        className: `gx-status gx-${selectedUser.status}`\n      }))), __jsx(\"div\", {\n        className: \"gx-chat-contact-name\"\n      }, selectedUser.name))), __jsx(CustomScrollbars, {\n        className: \"gx-chat-list-scroll\"\n      }, __jsx(Conversation, {\n        conversationData: conversationData,\n        selectedUser: selectedUser\n      })), __jsx(\"div\", {\n        className: \"gx-chat-main-footer\"\n      }, __jsx(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\",\n        style: {\n          maxHeight: 51\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-col\"\n      }, __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(\"textarea\", {\n        id: \"required\",\n        className: \"gx-border-0 ant-input gx-chat-textarea\",\n        onKeyUp: this._handleKeyPress.bind(this),\n        onChange: this.updateMessageValue.bind(this),\n        value: message,\n        placeholder: \"Type and hit enter to send message\"\n      }))), __jsx(\"i\", {\n        className: \"gx-icon-btn icon icon-sent\",\n        onClick: this.submitComment.bind(this)\n      }))));\n    });\n\n    _defineProperty(this, \"AppUsersInfo\", () => {\n      return __jsx(\"div\", {\n        className: \"gx-chat-sidenav-main\"\n      }, __jsx(\"div\", {\n        className: \"gx-bg-grey-light gx-chat-sidenav-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-chat-user-hd gx-mb-0\"\n      }, __jsx(\"i\", {\n        className: \"gx-icon-btn icon icon-arrow-left\",\n        onClick: () => {\n          this.setState({\n            userState: 1\n          });\n        }\n      })), __jsx(\"div\", {\n        className: \"gx-chat-user gx-chat-user-center\"\n      }, __jsx(\"div\", {\n        className: \"gx-chat-avatar gx-mx-auto\"\n      }, __jsx(Avatar, {\n        src: \"https://via.placeholder.com/150x150\",\n        className: \"gx-size-60\",\n        alt: \"John Doe\"\n      })), __jsx(\"div\", {\n        className: \"gx-user-name h4 gx-my-2\"\n      }, \"Robert Johnson\"))), __jsx(\"div\", {\n        className: \"gx-chat-sidenav-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-chat-sidenav-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-p-4\"\n      }, __jsx(\"form\", null, __jsx(\"div\", {\n        className: \"gx-form-group gx-mt-4\"\n      }, __jsx(\"label\", null, \"Mood\"), __jsx(Input, {\n        fullWidth: true,\n        id: \"exampleTextarea\",\n        multiline: true,\n        rows: 3,\n        onKeyUp: this._handleKeyPress.bind(this),\n        onChange: this.updateMessageValue.bind(this),\n        defaultValue: \"it's a status....not your diary...\",\n        placeholder: \"Status\",\n        margin: \"none\"\n      })))))));\n    });\n\n    _defineProperty(this, \"ChatUsers\", () => {\n      return __jsx(\"div\", {\n        className: \"gx-chat-sidenav-main\"\n      }, __jsx(\"div\", {\n        className: \"gx-chat-sidenav-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-chat-user-hd\"\n      }, __jsx(\"div\", {\n        className: \"gx-chat-avatar gx-mr-3\",\n        onClick: () => {\n          this.setState({\n            userState: 2\n          });\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-status-pos\"\n      }, __jsx(Avatar, {\n        id: \"avatar-button\",\n        src: \"https://via.placeholder.com/150x150\",\n        className: \"gx-size-50\",\n        alt: \"\"\n      }), __jsx(\"span\", {\n        className: \"gx-status gx-online\"\n      }))), __jsx(\"div\", {\n        className: \"gx-module-user-info gx-flex-column gx-justify-content-center\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-title\"\n      }, __jsx(\"h5\", {\n        className: \"gx-mb-0\"\n      }, \"Robert Johnson\")), __jsx(\"div\", {\n        className: \"gx-module-user-detail\"\n      }, __jsx(\"span\", {\n        className: \"gx-text-grey gx-link\"\n      }, \"robert@example.com\")))), __jsx(\"div\", {\n        className: \"gx-chat-search-wrapper\"\n      }, __jsx(SearchBox, {\n        styleName: \"gx-chat-search-bar gx-lt-icon-search-bar-lg\",\n        placeholder: \"Search or start new chat\",\n        onChange: this.updateSearchChatUser.bind(this),\n        value: this.state.searchChatUser\n      }))), __jsx(\"div\", {\n        className: \"gx-chat-sidenav-content\"\n      }, __jsx(Tabs, {\n        className: \"gx-tabs-half\",\n        defaultActiveKey: \"1\"\n      }, __jsx(TabPane, {\n        label: __jsx(IntlMessages, {\n          id: \"chat.chatUser\"\n        }),\n        tab: __jsx(IntlMessages, {\n          id: \"chat.chatUser\"\n        }),\n        key: \"1\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-chat-sidenav-scroll-tab-1\"\n      }, this.state.chatUsers.length === 0 ? __jsx(\"div\", {\n        className: \"gx-p-5\"\n      }, this.state.userNotFound) : __jsx(ChatUserList, {\n        chatUsers: this.state.chatUsers,\n        selectedSectionId: this.state.selectedSectionId,\n        onSelectUser: this.onSelectUser.bind(this)\n      }))), __jsx(TabPane, {\n        label: __jsx(IntlMessages, {\n          id: \"chat.contacts\"\n        }),\n        tab: __jsx(IntlMessages, {\n          id: \"chat.contacts\"\n        }),\n        key: \"2\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-chat-sidenav-scroll-tab-2\"\n      }, this.state.contactList.length === 0 ? __jsx(\"div\", {\n        className: \"gx-p-5\"\n      }, this.state.userNotFound) : __jsx(ContactList, {\n        contactList: this.state.contactList,\n        selectedSectionId: this.state.selectedSectionId,\n        onSelectUser: this.onSelectUser.bind(this)\n      }))))));\n    });\n\n    _defineProperty(this, \"_handleKeyPress\", e => {\n      if (e.key === 'Enter') {\n        this.submitComment();\n      }\n    });\n\n    _defineProperty(this, \"handleChange\", (event, value) => {\n      this.setState({\n        selectedTabIndex: value\n      });\n    });\n\n    _defineProperty(this, \"handleChangeIndex\", index => {\n      this.setState({\n        selectedTabIndex: index\n      });\n    });\n\n    _defineProperty(this, \"onSelectUser\", user => {\n      this.setState({\n        loader: true,\n        selectedSectionId: user.id,\n        drawerState: this.props.drawerState,\n        selectedUser: user,\n        conversation: this.state.conversationList.find(data => data.id === user.id)\n      });\n      setTimeout(() => {\n        this.setState({\n          loader: false\n        });\n      }, 1500);\n    });\n\n    _defineProperty(this, \"showCommunication\", () => {\n      return __jsx(\"div\", {\n        className: \"gx-chat-box\"\n      }, this.state.selectedUser === null ? __jsx(\"div\", {\n        className: \"gx-comment-box\"\n      }, __jsx(\"div\", {\n        className: \"gx-fs-80\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-chat gx-text-muted\"\n      })), __jsx(\"h1\", {\n        className: \"gx-text-muted\"\n      }, __jsx(IntlMessages, {\n        id: \"chat.selectUserChat\"\n      })), __jsx(Button, {\n        className: \"gx-d-block gx-d-lg-none\",\n        type: \"primary\",\n        onClick: this.onToggleDrawer.bind(this)\n      }, __jsx(IntlMessages, {\n        id: \"chat.selectContactChat\"\n      }))) : this.Communication());\n    });\n\n    this.state = {\n      loader: false,\n      userNotFound: 'No user found',\n      drawerState: false,\n      selectedSectionId: '',\n      selectedTabIndex: 1,\n      userState: 1,\n      searchChatUser: '',\n      contactList: users.filter(user => !user.recent),\n      selectedUser: null,\n      message: '',\n      chatUsers: users.filter(user => user.recent),\n      conversationList: conversationList,\n      conversation: null\n    };\n  }\n\n  submitComment() {\n    if (this.state.message !== '') {\n      const updatedConversation = this.state.conversation.conversationData.concat({\n        'type': 'sent',\n        'message': this.state.message,\n        'sentAt': Moment().format('hh:mm:ss A')\n      });\n      this.setState({\n        conversation: _objectSpread(_objectSpread({}, this.state.conversation), {}, {\n          conversationData: updatedConversation\n        }),\n        message: '',\n        conversationList: this.state.conversationList.map(conversationData => {\n          if (conversationData.id === this.state.conversation.id) {\n            return _objectSpread(_objectSpread({}, this.state.conversation), {}, {\n              conversationData: updatedConversation\n            });\n          } else {\n            return conversationData;\n          }\n        })\n      });\n    }\n  }\n\n  updateMessageValue(evt) {\n    this.setState({\n      message: evt.target.value\n    });\n  }\n\n  updateSearchChatUser(evt) {\n    this.setState({\n      searchChatUser: evt.target.value,\n      contactList: this.filterContact(evt.target.value),\n      chatUsers: this.filterUsers(evt.target.value)\n    });\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      loader,\n      userState,\n      drawerState\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"gx-main-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-app-module gx-chat-module\"\n    }, __jsx(\"div\", {\n      className: \"gx-chat-module-box\"\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\"\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this)\n    }, userState === 1 ? this.ChatUsers() : this.AppUsersInfo())), __jsx(\"div\", {\n      className: \"gx-chat-sidenav gx-d-none gx-d-lg-flex\"\n    }, userState === 1 ? this.ChatUsers() : this.AppUsersInfo()), loader ? __jsx(\"div\", {\n      className: \"gx-loader-view\"\n    }, __jsx(CircularProgress, null)) : this.showCommunication())));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/inbuiltApps/Chat/index.js"],"names":["React","Component","Avatar","Button","Drawer","Input","Tabs","CustomScrollbars","Moment","ChatUserList","conversationList","Conversation","users","ContactList","IntlMessages","SearchBox","CircularProgress","TabPane","Chat","constructor","userName","filter","user","recent","name","toLowerCase","indexOf","message","selectedUser","conversation","state","conversationData","onToggleDrawer","bind","thumb","status","maxHeight","_handleKeyPress","updateMessageValue","submitComment","setState","userState","updateSearchChatUser","searchChatUser","chatUsers","length","userNotFound","selectedSectionId","onSelectUser","contactList","e","key","event","value","selectedTabIndex","index","loader","id","drawerState","props","find","data","setTimeout","Communication","updatedConversation","concat","format","map","evt","target","filterContact","filterUsers","render","ChatUsers","AppUsersInfo","showCommunication"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Avatar, Button, Drawer, Input, Tabs} from \"antd\";\r\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\r\nimport Moment from \"moment\";\r\n\r\nimport ChatUserList from \"../../../app/components/chat/ChatUserList\";\r\nimport conversationList from \"./data/conversationList\";\r\nimport Conversation from \"../../../app/components/chat/Conversation\";\r\nimport users from \"./data/chatUsers\";\r\nimport ContactList from \"../../../app/components/chat/ContactList\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\nimport SearchBox from \"../../../app/components/SearchBox\";\r\nimport CircularProgress from \"../../../app/components/CircularProgress\";\r\nimport './index.css';\r\n\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nclass Chat extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loader: false,\r\n      userNotFound: 'No user found',\r\n      drawerState: false,\r\n      selectedSectionId: '',\r\n      selectedTabIndex: 1,\r\n      userState: 1,\r\n      searchChatUser: '',\r\n      contactList: users.filter((user) => !user.recent),\r\n      selectedUser: null,\r\n      message: '',\r\n      chatUsers: users.filter((user) => user.recent),\r\n      conversationList: conversationList,\r\n      conversation: null\r\n    }\r\n  }\r\n\r\n  filterContact = (userName) => {\r\n    if (userName === '') {\r\n      return users.filter(user => !user.recent);\r\n    }\r\n    return users.filter((user) =>\r\n      !user.recent && user.name.toLowerCase().indexOf(userName.toLowerCase()) > -1\r\n    );\r\n  };\r\n\r\n  filterUsers = (userName) => {\r\n    if (userName === '') {\r\n      return users.filter(user => user.recent);\r\n    }\r\n    return users.filter((user) =>\r\n      user.recent && user.name.toLowerCase().indexOf(userName.toLowerCase()) > -1\r\n    );\r\n  };\r\n\r\n  Communication = () => {\r\n    const {message, selectedUser, conversation} = this.state;\r\n    const {conversationData} = conversation;\r\n    return <div className=\"gx-chat-main\">\r\n      <div className=\"gx-chat-main-header\">\r\n        <span className=\"gx-d-block gx-d-lg-none gx-chat-btn\"><i className=\"gx-icon-btn icon icon-chat\"\r\n                                                                 onClick={this.onToggleDrawer.bind(this)}/></span>\r\n        <div className=\"gx-chat-main-header-info\">\r\n\r\n          <div className=\"gx-chat-avatar gx-mr-2\">\r\n            <div className=\"gx-status-pos\">\r\n              <Avatar src={selectedUser.thumb}\r\n                      className=\"gx-rounded-circle gx-size-60\"\r\n                      alt=\"\"/>\r\n\r\n              <span className={`gx-status gx-${selectedUser.status}`}/>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"gx-chat-contact-name\">\r\n            {selectedUser.name}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <CustomScrollbars className=\"gx-chat-list-scroll\">\r\n        <Conversation conversationData={conversationData}\r\n                      selectedUser={selectedUser}/>\r\n      </CustomScrollbars>\r\n\r\n      <div className=\"gx-chat-main-footer\">\r\n        <div className=\"gx-flex-row gx-align-items-center\" style={{maxHeight: 51}}>\r\n          <div className=\"gx-col\">\r\n            <div className=\"gx-form-group\">\r\n                            <textarea\r\n                              id=\"required\" className=\"gx-border-0 ant-input gx-chat-textarea\"\r\n                              onKeyUp={this._handleKeyPress.bind(this)}\r\n                              onChange={this.updateMessageValue.bind(this)}\r\n                              value={message}\r\n                              placeholder=\"Type and hit enter to send message\"\r\n                            />\r\n            </div>\r\n          </div>\r\n          <i className=\"gx-icon-btn icon icon-sent\" onClick={this.submitComment.bind(this)}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  };\r\n\r\n  AppUsersInfo = () => {\r\n    return <div className=\"gx-chat-sidenav-main\">\r\n      <div className=\"gx-bg-grey-light gx-chat-sidenav-header\">\r\n\r\n        <div className=\"gx-chat-user-hd gx-mb-0\">\r\n          <i className=\"gx-icon-btn icon icon-arrow-left\" onClick={() => {\r\n            this.setState({userState: 1});\r\n          }}/>\r\n\r\n        </div>\r\n        <div className=\"gx-chat-user gx-chat-user-center\">\r\n          <div className=\"gx-chat-avatar gx-mx-auto\">\r\n            <Avatar src=\"https://via.placeholder.com/150x150\" className=\"gx-size-60\" alt=\"John Doe\"/>\r\n          </div>\r\n\r\n          <div className=\"gx-user-name h4 gx-my-2\">Robert Johnson</div>\r\n\r\n        </div>\r\n      </div>\r\n      <div className=\"gx-chat-sidenav-content\">\r\n\r\n        <CustomScrollbars className=\"gx-chat-sidenav-scroll\">\r\n          <div className=\"gx-p-4\">\r\n            <form>\r\n              <div className=\"gx-form-group gx-mt-4\">\r\n                <label>Mood</label>\r\n\r\n                <Input\r\n                  fullWidth\r\n                  id=\"exampleTextarea\"\r\n                  multiline\r\n                  rows={3}\r\n                  onKeyUp={this._handleKeyPress.bind(this)}\r\n                  onChange={this.updateMessageValue.bind(this)}\r\n                  defaultValue=\"it's a status....not your diary...\"\r\n                  placeholder=\"Status\"\r\n                  margin=\"none\"/>\r\n\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </CustomScrollbars>\r\n\r\n      </div>\r\n    </div>\r\n  };\r\n\r\n  ChatUsers = () => {\r\n    return <div className=\"gx-chat-sidenav-main\">\r\n\r\n      <div className=\"gx-chat-sidenav-header\">\r\n\r\n        <div className=\"gx-chat-user-hd\">\r\n\r\n          <div className=\"gx-chat-avatar gx-mr-3\" onClick={() => {\r\n            this.setState({\r\n              userState: 2\r\n            });\r\n          }}>\r\n            <div className=\"gx-status-pos\">\r\n              <Avatar id=\"avatar-button\" src=\"https://via.placeholder.com/150x150\"\r\n                      className=\"gx-size-50\"\r\n                      alt=\"\"/>\r\n              <span className=\"gx-status gx-online\"/>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"gx-module-user-info gx-flex-column gx-justify-content-center\">\r\n            <div className=\"gx-module-title\">\r\n              <h5 className=\"gx-mb-0\">Robert Johnson</h5>\r\n            </div>\r\n            <div className=\"gx-module-user-detail\">\r\n              <span className=\"gx-text-grey gx-link\">robert@example.com</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"gx-chat-search-wrapper\">\r\n\r\n          <SearchBox styleName=\"gx-chat-search-bar gx-lt-icon-search-bar-lg\"\r\n                     placeholder=\"Search or start new chat\"\r\n                     onChange={this.updateSearchChatUser.bind(this)}\r\n                     value={this.state.searchChatUser}/>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"gx-chat-sidenav-content\">\r\n        {/*<AppBar position=\"public\" className=\"no-shadow chat-tabs-header\">*/}\r\n        <Tabs className=\"gx-tabs-half\" defaultActiveKey=\"1\">\r\n          <TabPane label={<IntlMessages id=\"chat.chatUser\"/>} tab={<IntlMessages id=\"chat.chatUser\"/>} key=\"1\">\r\n            <CustomScrollbars className=\"gx-chat-sidenav-scroll-tab-1\">\r\n              {this.state.chatUsers.length === 0 ?\r\n                <div className=\"gx-p-5\">{this.state.userNotFound}</div>\r\n                :\r\n                <ChatUserList chatUsers={this.state.chatUsers}\r\n                              selectedSectionId={this.state.selectedSectionId}\r\n                              onSelectUser={this.onSelectUser.bind(this)}/>\r\n              }\r\n            </CustomScrollbars>\r\n          </TabPane>\r\n          <TabPane label={<IntlMessages id=\"chat.contacts\"/>} tab={<IntlMessages id=\"chat.contacts\"/>} key=\"2\">\r\n            <CustomScrollbars className=\"gx-chat-sidenav-scroll-tab-2\">\r\n              {\r\n                this.state.contactList.length === 0 ?\r\n                  <div className=\"gx-p-5\">{this.state.userNotFound}</div>\r\n                  :\r\n                  <ContactList contactList={this.state.contactList}\r\n                               selectedSectionId={this.state.selectedSectionId}\r\n                               onSelectUser={this.onSelectUser.bind(this)}/>\r\n              }\r\n            </CustomScrollbars>\r\n          </TabPane>\r\n        </Tabs>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  };\r\n\r\n  _handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.submitComment();\r\n    }\r\n  };\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({selectedTabIndex: value});\r\n  };\r\n\r\n  handleChangeIndex = index => {\r\n    this.setState({selectedTabIndex: index});\r\n  };\r\n\r\n  onSelectUser = (user) => {\r\n    this.setState({\r\n      loader: true,\r\n      selectedSectionId: user.id,\r\n      drawerState: this.props.drawerState,\r\n      selectedUser: user,\r\n      conversation: this.state.conversationList.find((data) => data.id === user.id)\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  };\r\n\r\n  showCommunication = () => {\r\n    return (\r\n      <div className=\"gx-chat-box\">\r\n        {this.state.selectedUser === null ?\r\n          <div className=\"gx-comment-box\">\r\n            <div className=\"gx-fs-80\"><i className=\"icon icon-chat gx-text-muted\"/></div>\r\n            <h1 className=\"gx-text-muted\">{<IntlMessages id=\"chat.selectUserChat\"/>}</h1>\r\n            <Button className=\"gx-d-block gx-d-lg-none\" type=\"primary\"\r\n                    onClick={this.onToggleDrawer.bind(this)}>{<IntlMessages\r\n              id=\"chat.selectContactChat\"/>}</Button>\r\n\r\n          </div>\r\n          : this.Communication()}\r\n      </div>)\r\n  };\r\n\r\n  submitComment() {\r\n    if (this.state.message !== '') {\r\n      const updatedConversation = this.state.conversation.conversationData.concat({\r\n        'type': 'sent',\r\n        'message': this.state.message,\r\n        'sentAt': Moment().format('hh:mm:ss A'),\r\n      });\r\n      this.setState({\r\n        conversation: {\r\n          ...this.state.conversation, conversationData: updatedConversation\r\n        },\r\n        message: '',\r\n        conversationList: this.state.conversationList.map(conversationData => {\r\n          if (conversationData.id === this.state.conversation.id) {\r\n            return {...this.state.conversation, conversationData: updatedConversation};\r\n          } else {\r\n            return conversationData;\r\n          }\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  updateMessageValue(evt) {\r\n    this.setState({\r\n      message: evt.target.value\r\n    });\r\n  }\r\n\r\n  updateSearchChatUser(evt) {\r\n    this.setState({\r\n      searchChatUser: evt.target.value,\r\n      contactList: this.filterContact(evt.target.value),\r\n      chatUsers: this.filterUsers(evt.target.value)\r\n    });\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {loader, userState, drawerState} = this.state;\r\n    return (\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module gx-chat-module\">\r\n          <div className=\"gx-chat-module-box\">\r\n            <div className=\"gx-d-block gx-d-lg-none\">\r\n              <Drawer\r\n                placement=\"left\"\r\n                closable={false}\r\n                visible={drawerState}\r\n                onClose={this.onToggleDrawer.bind(this)}>\r\n                {userState === 1 ? this.ChatUsers() : this.AppUsersInfo()}\r\n              </Drawer>\r\n            </div>\r\n            <div className=\"gx-chat-sidenav gx-d-none gx-d-lg-flex\">\r\n              {userState === 1 ? this.ChatUsers() : this.AppUsersInfo()}\r\n            </div>\r\n            {loader ?\r\n              <div className=\"gx-loader-view\">\r\n                <CircularProgress/>\r\n              </div> : this.showCommunication()\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}