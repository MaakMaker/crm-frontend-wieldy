{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Avatar, Badge, Col, DatePicker, Input, Menu, Row } from \"antd\";\nimport Moment from \"moment\";\nimport CustomScrollbars from \"../../../../util/CustomScrollbars\";\nimport labels from \"../../../../routes/inbuiltApps/Todo/data/labels\";\nimport users from \"../../../../routes/inbuiltApps/Todo/data/users\";\nimport ConversationCell from \"./ConversationCell\";\nconst {\n  TextArea\n} = Input;\n\nclass ToDoDetail extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleLabelClick\", event => {\n      this.setState({\n        labelMenu: true,\n        anchorEl: event.currentTarget\n      });\n    });\n\n    _defineProperty(this, \"handleUserClick\", event => {\n      this.setState({\n        userMenu: true,\n        anchorEl: event.currentTarget\n      });\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        userMenu: false,\n        labelMenu: false\n      });\n    });\n\n    _defineProperty(this, \"_handleKeyPress\", e => {\n      if (e.key === 'Enter') {\n        this.submitComment();\n      }\n    });\n\n    _defineProperty(this, \"handleEditTitle\", () => {\n      if (this.state.editTitle) {\n        const todo = this.state.todo;\n        todo.title = this.state.title;\n        this.props.onToDoUpdate(todo);\n      }\n\n      this.setState({\n        editTitle: !this.state.editTitle\n      });\n    });\n\n    _defineProperty(this, \"handleEditNote\", () => {\n      if (this.state.note) {\n        const todo = this.state.todo;\n        todo.note = this.state.note;\n        this.props.onToDoUpdate(todo);\n      }\n\n      this.setState({\n        editNote: !this.state.editNote\n      });\n    });\n\n    _defineProperty(this, \"handleDueDateChange\", date => {\n      this.setState({\n        todo: _objectSpread(_objectSpread({}, this.state.todo), {}, {\n          dueDate: date\n        })\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"optionMenu\", () => {\n      return __jsx(Menu, {\n        id: \"label-menu\",\n        onClick: this.handleRequestClose,\n        onClose: this.handleRequestClose\n      }, users.map((user, index) => __jsx(Menu.Item, {\n        key: index,\n        value: user.id\n      }, __jsx(\"div\", {\n        className: \"gx-d-flex gx-user-name gx-align-items-center\"\n      }, __jsx(Avatar, {\n        src: user.thumb,\n        alt: user.name\n      }), __jsx(\"h4\", null, user.name)))));\n    });\n\n    _defineProperty(this, \"labelMenu\", () => {\n      return __jsx(Menu, {\n        id: \"label-menu\",\n        onClick: this.handleRequestClose()\n      }, labels.map(label => __jsx(Menu.Item, {\n        key: label.id\n      }, label.title)));\n    });\n\n    const {\n      title,\n      notes\n    } = props.todo;\n    const {\n      conversation\n    } = props;\n    this.state = {\n      todo: props.todo,\n      title,\n      notes,\n      anchorEl: undefined,\n      userMenu: false,\n      labelMenu: false,\n      editTitle: false,\n      editNote: false,\n      message: '',\n      conversation\n    };\n    this.handleRequestClose = this.handleRequestClose.bind(this);\n  }\n\n  submitComment() {\n    if (this.state.message !== '') {\n      const updatedConversation = this.state.conversation.concat({\n        'name': this.props.user.name,\n        'thumb': this.props.user.avatar,\n        'message': this.state.message,\n        'sentAt': Moment().format('ddd DD, YYYY, hh:mm:ss A')\n      });\n      this.setState({\n        conversation: updatedConversation,\n        message: ''\n      });\n    }\n  }\n\n  updateMessageValue(evt) {\n    this.setState({\n      message: evt.target.value\n    });\n  }\n\n  render() {\n    const {\n      onToDoUpdate,\n      onDeleteToDo\n    } = this.props;\n    const {\n      todo,\n      editNote,\n      editTitle,\n      title,\n      notes,\n      message,\n      conversation\n    } = this.state;\n    let user = null;\n    if (todo.user > 0) user = users.find(user => user.id === todo.user);\n    return __jsx(\"div\", {\n      className: \"gx-module-detail gx-module-list\"\n    }, __jsx(CustomScrollbars, {\n      className: \"gx-todo-detail-content-scroll\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-detail-item gx-module-detail-header\"\n    }, __jsx(Row, null, __jsx(Col, {\n      xs: 24,\n      sm: 12,\n      md: 17,\n      lg: 12,\n      xl: 17\n    }, __jsx(\"div\", {\n      className: \"gx-flex-row\"\n    }, __jsx(\"div\", {\n      className: \"gx-user-name gx-mr-md-4 gx-mr-2 gx-my-1\",\n      onClick: this.handleUserClick\n    }, user === null ? __jsx(\"h4\", {\n      className: \"gx-mb-0 gx-pointer\"\n    }, \"Assign User \") : __jsx(\"div\", {\n      className: \"gx-flex-row gx-align-items-center gx-pointer\"\n    }, __jsx(Avatar, {\n      className: \"gx-mr-2\",\n      src: user.thumb,\n      alt: user.name\n    }), __jsx(\"h4\", {\n      className: \"gx-mb-0\"\n    }, user.name))), __jsx(DatePicker, {\n      className: \"gx-module-date gx-my-1\",\n      defaultValue: todo.dueDate !== null ? Moment(todo.dueDate, 'dddd, MMMM DD, YYYY h:mm a') : undefined,\n      invalidLabel: \"Due Date\",\n      format: \"MMMM DD, YYYY\",\n      onChange: this.handleDueDateChange.bind(this),\n      animateYearScrolling: false\n    }))), __jsx(Col, {\n      xs: 24,\n      sm: 12,\n      md: 7,\n      lg: 12,\n      xl: 7\n    }, __jsx(\"div\", {\n      className: \"gx-flex-row gx-justify-content-between\"\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-trash\",\n      onClick: () => {\n        onDeleteToDo(todo);\n      }\n    }), __jsx(\"span\", {\n      className: \"gx-d-block\",\n      onClick: () => {\n        todo.starred = !todo.starred;\n        onToDoUpdate(todo);\n      }\n    }, todo.starred ? __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-star\"\n    }) : __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-star-o\"\n    })), __jsx(\"span\", {\n      className: \"gx-d-block\",\n      onClick: () => {\n        todo.important = !todo.important;\n        onToDoUpdate(todo);\n      }\n    }, todo.important ? __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-important\"\n    }) : __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-important-o\"\n    })), __jsx(\"span\", {\n      className: \"gx-d-block\",\n      onClick: this.handleLabelClick\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-tag\"\n    })))))), __jsx(\"div\", {\n      className: \"gx-module-detail-item\"\n    }, __jsx(\"div\", {\n      className: \"gx-mb-md-4 gx-mb-2\"\n    }, labels.map((label, index) => {\n      return todo.labels.includes(label.id) && __jsx(Badge, {\n        key: index,\n        count: label.title,\n        style: {\n          backgroundColor: label.color\n        }\n      });\n    })), __jsx(\"div\", {\n      className: \"gx-form-group gx-flex-row gx-align-items-center gx-mb-0 gx-flex-nowrap\"\n    }, __jsx(\"div\", {\n      onClick: event => {\n        todo.completed = !todo.completed;\n        onToDoUpdate(todo);\n      }\n    }, todo.completed ? __jsx(\"span\", {\n      className: \"gx-border-2 gx-size-30 gx-rounded-circle gx-text-green gx-border-green gx-d-block gx-text-center gx-pointer\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-check\"\n    })) : __jsx(\"span\", {\n      className: \"gx-border-2 gx-size-30 gx-rounded-circle gx-text-muted gx-border-grey gx-d-block gx-text-center gx-pointer\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-check\"\n    }))), editTitle ? __jsx(\"div\", {\n      className: \"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\"\n    }, __jsx(\"div\", {\n      className: \"gx-col\"\n    }, __jsx(Input, {\n      fullWidth: true,\n      className: \"gx-task-title\",\n      id: \"required\",\n      placeholder: \"Title\",\n      onChange: event => this.setState({\n        title: event.target.value\n      }),\n      defaultValue: title\n    })), __jsx(\"span\", {\n      className: \"gx-d-block gx-size-40 gx-text-center gx-pointer\",\n      onClick: this.handleEditTitle\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-edit\"\n    }))) : __jsx(\"div\", {\n      className: \"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\"\n    }, __jsx(\"div\", {\n      className: \"gx-task-title gx-col\"\n    }, title), __jsx(\"span\", {\n      className: \"gx-d-block gx-size-40 gx-text-center gx-pointer\",\n      onClick: this.handleEditTitle\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-edit\"\n    }))))), __jsx(\"div\", {\n      className: \"gx-module-detail-item gx-mb-md-4 gx-mb-2\"\n    }, editNote ? __jsx(\"div\", {\n      className: \"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\"\n    }, __jsx(\"div\", {\n      className: \"gx-task-input gx-col\"\n    }, __jsx(Input, {\n      fullWidth: true,\n      id: \"required\",\n      placeholder: \"Note\",\n      onChange: event => this.setState({\n        notes: event.target.value\n      }),\n      defaultValue: notes\n    })), __jsx(\"span\", {\n      className: \"gx-d-block gx-size-40 gx-text-center gx-pointer\",\n      onClick: this.handleEditNote\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-edit\"\n    }))) : __jsx(\"div\", {\n      className: \"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\"\n    }, __jsx(\"div\", {\n      className: \"gx-task-des gx-col\"\n    }, notes === '' ? 'Add note here' : notes), __jsx(\"span\", {\n      className: \"gx-d-block gx-size-40 gx-text-center gx-pointer\",\n      onClick: this.handleEditNote\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-edit\"\n    })))), __jsx(\"div\", {\n      className: \"gx-module-detail-item\"\n    }, __jsx(\"h3\", {\n      className: \"gx-mb-0 gx-mb-sm-1\"\n    }, \"Comments\")), conversation.map((conversation, index) => __jsx(ConversationCell, {\n      key: index,\n      conversation: conversation\n    }))), __jsx(\"div\", {\n      className: \"gx-chat-main-footer gx-todo-main-footer\"\n    }, __jsx(\"div\", {\n      className: \"gx-flex-row gx-align-items-center\"\n    }, __jsx(\"div\", {\n      className: \"gx-col\"\n    }, __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(TextArea, {\n      className: \"gx-border-0 ant-input gx-chat-textarea\",\n      id: \"required\",\n      onKeyUp: this._handleKeyPress.bind(this),\n      onChange: this.updateMessageValue.bind(this),\n      value: message,\n      rows: 2,\n      placeholder: \"Type and hit enter to send message\"\n    }))), __jsx(\"div\", {\n      className: \"gx-chat-sent\",\n      onClick: this.submitComment.bind(this),\n      \"aria-label\": \"Send message\"\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-sent\"\n    })))));\n  }\n\n}\n\nexport default ToDoDetail;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/app/components/todo/ToDoDetail/index.js"],"names":["React","Avatar","Badge","Col","DatePicker","Input","Menu","Row","Moment","CustomScrollbars","labels","users","ConversationCell","TextArea","ToDoDetail","Component","constructor","props","event","setState","labelMenu","anchorEl","currentTarget","userMenu","e","key","submitComment","state","editTitle","todo","title","onToDoUpdate","note","editNote","date","dueDate","target","name","value","handleRequestClose","map","user","index","id","thumb","label","notes","conversation","undefined","message","bind","updatedConversation","concat","avatar","format","updateMessageValue","evt","render","onDeleteToDo","find","handleUserClick","handleDueDateChange","starred","important","handleLabelClick","includes","backgroundColor","color","completed","handleEditTitle","handleEditNote","_handleKeyPress"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Avatar, Badge, Col, DatePicker, Input, Menu, Row} from \"antd\";\r\nimport Moment from \"moment\";\r\nimport CustomScrollbars from \"../../../../util/CustomScrollbars\";\r\n\r\nimport labels from \"../../../../routes/inbuiltApps/Todo/data/labels\";\r\nimport users from \"../../../../routes/inbuiltApps/Todo/data/users\";\r\nimport ConversationCell from \"./ConversationCell\";\r\n\r\nconst {TextArea} = Input;\r\n\r\nclass ToDoDetail extends React.Component {\r\n  handleLabelClick = event => {\r\n    this.setState({labelMenu: true, anchorEl: event.currentTarget});\r\n  };\r\n  handleUserClick = event => {\r\n    this.setState({userMenu: true, anchorEl: event.currentTarget});\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({userMenu: false, labelMenu: false});\r\n  };\r\n  _handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.submitComment();\r\n    }\r\n  };\r\n  handleEditTitle = () => {\r\n    if (this.state.editTitle) {\r\n      const todo = this.state.todo;\r\n      todo.title = this.state.title;\r\n      this.props.onToDoUpdate(todo)\r\n    }\r\n    this.setState({\r\n      editTitle: !this.state.editTitle\r\n    });\r\n  };\r\n  handleEditNote = () => {\r\n    if (this.state.note) {\r\n      const todo = this.state.todo;\r\n      todo.note = this.state.note;\r\n      this.props.onToDoUpdate(todo)\r\n    }\r\n    this.setState({\r\n      editNote: !this.state.editNote\r\n    });\r\n  };\r\n  handleDueDateChange = (date) => {\r\n    this.setState({\r\n      todo: {...this.state.todo, dueDate: date}\r\n    });\r\n  };\r\n  handleChange = event => {\r\n    this.setState({[event.target.name]: event.target.value});\r\n  };\r\n  optionMenu = () => {\r\n    return (<Menu\r\n      id=\"label-menu\" onClick={this.handleRequestClose}\r\n      onClose={this.handleRequestClose}>\r\n      {users.map((user, index) =>\r\n        <Menu.Item key={index} value={user.id}>\r\n          <div className=\"gx-d-flex gx-user-name gx-align-items-center\">\r\n            <Avatar src={user.thumb} alt={user.name}/><h4>{user.name}</h4>\r\n          </div>\r\n        </Menu.Item>\r\n      )}\r\n\r\n    </Menu>)\r\n  };\r\n  labelMenu = () => {\r\n    return (<Menu id=\"label-menu\" onClick={this.handleRequestClose()}>\r\n      {labels.map(label =>\r\n        <Menu.Item key={label.id}>\r\n          {label.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>)\r\n\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const {title, notes} = props.todo;\r\n    const {conversation} = props;\r\n    this.state = {\r\n      todo: props.todo,\r\n      title,\r\n      notes,\r\n      anchorEl: undefined,\r\n      userMenu: false,\r\n      labelMenu: false,\r\n      editTitle: false,\r\n      editNote: false,\r\n      message: '',\r\n      conversation\r\n    };\r\n    this.handleRequestClose = this.handleRequestClose.bind(this)\r\n  }\r\n\r\n  submitComment() {\r\n    if (this.state.message !== '') {\r\n      const updatedConversation = this.state.conversation.concat({\r\n        'name': this.props.user.name,\r\n        'thumb': this.props.user.avatar,\r\n        'message': this.state.message,\r\n        'sentAt': Moment().format('ddd DD, YYYY, hh:mm:ss A'),\r\n      });\r\n      this.setState({\r\n        conversation: updatedConversation,\r\n        message: '',\r\n      });\r\n    }\r\n  }\r\n\r\n  updateMessageValue(evt) {\r\n    this.setState({\r\n      message: evt.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {onToDoUpdate, onDeleteToDo} = this.props;\r\n    const {todo, editNote, editTitle, title, notes, message, conversation} = this.state;\r\n    let user = null;\r\n    if (todo.user > 0)\r\n      user = users.find((user) => user.id === todo.user);\r\n\r\n    return (\r\n      <div className=\"gx-module-detail gx-module-list\">\r\n        <CustomScrollbars className=\"gx-todo-detail-content-scroll\">\r\n          <div className=\"gx-module-detail-item gx-module-detail-header\">\r\n            <Row>\r\n              <Col xs={24} sm={12} md={17} lg={12} xl={17}>\r\n                <div className=\"gx-flex-row\">\r\n                  <div className=\"gx-user-name gx-mr-md-4 gx-mr-2 gx-my-1\"\r\n                       onClick={this.handleUserClick}>\r\n\r\n                    {user === null ? <h4 className=\"gx-mb-0 gx-pointer\">Assign User </h4> :\r\n                      <div className=\"gx-flex-row gx-align-items-center gx-pointer\">\r\n                        <Avatar className=\"gx-mr-2\" src={user.thumb} alt={user.name}/>\r\n                        <h4 className=\"gx-mb-0\">{user.name}</h4>\r\n                      </div>}\r\n                  </div>\r\n                  <DatePicker className=\"gx-module-date gx-my-1\"\r\n                              defaultValue={todo.dueDate !== null ? Moment(todo.dueDate, 'dddd, MMMM DD, YYYY h:mm a') : undefined}\r\n                              invalidLabel=\"Due Date\"\r\n                              format=\"MMMM DD, YYYY\"\r\n                              onChange={this.handleDueDateChange.bind(this)}\r\n                              animateYearScrolling={false}/>\r\n\r\n\r\n                </div>\r\n              </Col>\r\n\r\n              <Col xs={24} sm={12} md={7} lg={12} xl={7}>\r\n                <div className=\"gx-flex-row gx-justify-content-between\">\r\n                  <i className=\"gx-icon-btn icon icon-trash\" onClick={() => {\r\n                    onDeleteToDo(todo);\r\n                  }}/>\r\n\r\n                  <span className=\"gx-d-block\" onClick={() => {\r\n                    todo.starred = !todo.starred;\r\n                    onToDoUpdate(todo);\r\n                  }}>\r\n                        {todo.starred ?\r\n                          <i className=\"gx-icon-btn icon icon-star\"/> :\r\n                          <i className=\"gx-icon-btn icon icon-star-o\"/>\r\n                        }\r\n\r\n                  </span>\r\n\r\n                  <span className=\"gx-d-block\" onClick={() => {\r\n                    todo.important = !todo.important;\r\n                    onToDoUpdate(todo);\r\n                  }}>\r\n                        {todo.important ?\r\n                          <i className=\"gx-icon-btn icon icon-important\"/> :\r\n                          <i className=\"gx-icon-btn icon icon-important-o\"/>\r\n                        }\r\n\r\n                  </span>\r\n                  <span className=\"gx-d-block\" onClick={this.handleLabelClick}>\r\n                          <i className=\"gx-icon-btn icon icon-tag\"/>\r\n                  </span>\r\n\r\n\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n          <div className=\"gx-module-detail-item\">\r\n\r\n            <div className=\"gx-mb-md-4 gx-mb-2\">\r\n              {labels.map((label, index) => {\r\n                return (todo.labels).includes(label.id) &&\r\n                  <Badge key={index} count={label.title} style={{backgroundColor: label.color}}/>\r\n              })}\r\n            </div>\r\n\r\n            <div className=\"gx-form-group gx-flex-row gx-align-items-center gx-mb-0 gx-flex-nowrap\">\r\n              <div onClick={(event) => {\r\n                todo.completed = !todo.completed;\r\n                onToDoUpdate(todo);\r\n              }}>\r\n                {todo.completed ?\r\n                  <span\r\n                    className=\"gx-border-2 gx-size-30 gx-rounded-circle gx-text-green gx-border-green gx-d-block gx-text-center gx-pointer\">\r\n                                        <i className=\"icon icon-check\"/></span>\r\n                  : <span\r\n                    className=\"gx-border-2 gx-size-30 gx-rounded-circle gx-text-muted gx-border-grey gx-d-block gx-text-center gx-pointer\">\r\n                                        <i className=\"icon icon-check\"/>\r\n                                    </span>\r\n                }\r\n              </div>\r\n              {editTitle ?\r\n                <div className=\"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\">\r\n                  <div className=\"gx-col\">\r\n                    <Input\r\n                      fullWidth\r\n                      className=\"gx-task-title\"\r\n                      id=\"required\"\r\n                      placeholder=\"Title\"\r\n                      onChange={(event) => this.setState({title: event.target.value})}\r\n                      defaultValue={title}/>\r\n                  </div>\r\n\r\n                  <span className=\"gx-d-block gx-size-40 gx-text-center gx-pointer\"\r\n                        onClick={this.handleEditTitle}>\r\n                    <i className=\"gx-icon-btn icon icon-edit\"/>\r\n                  </span>\r\n                </div> :\r\n                <div className=\"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\">\r\n                  <div className=\"gx-task-title gx-col\">\r\n                    {title}\r\n                  </div>\r\n                  <span className=\"gx-d-block gx-size-40 gx-text-center gx-pointer\"\r\n                        onClick={this.handleEditTitle}>\r\n                    <i className=\"gx-icon-btn icon icon-edit\"/>\r\n                  </span>\r\n\r\n                </div>}\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"gx-module-detail-item gx-mb-md-4 gx-mb-2\">\r\n            {editNote ?\r\n              <div className=\"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\">\r\n                <div className=\"gx-task-input gx-col\">\r\n                  <Input\r\n                    fullWidth\r\n                    id=\"required\"\r\n                    placeholder=\"Note\"\r\n                    onChange={(event) => this.setState({notes: event.target.value})}\r\n                    defaultValue={notes}/>\r\n                </div>\r\n\r\n                <span className=\"gx-d-block gx-size-40 gx-text-center gx-pointer\" onClick={this.handleEditNote}>\r\n                    <i className=\"gx-icon-btn icon icon-edit\"/>\r\n                </span>\r\n              </div> :\r\n              <div className=\"gx-flex-row gx-align-items-center gx-justify-content-between gx-flex-1 gx-flex-nowrap\">\r\n                <div className=\"gx-task-des gx-col\">\r\n                  {notes === '' ? 'Add note here' : notes}\r\n                </div>\r\n                <span className=\"gx-d-block gx-size-40 gx-text-center gx-pointer\"\r\n                      onClick={this.handleEditNote}>\r\n                  <i className=\"gx-icon-btn icon icon-edit\"/>\r\n                </span>\r\n\r\n              </div>}\r\n          </div>\r\n          <div className=\"gx-module-detail-item\">\r\n            <h3 className=\"gx-mb-0 gx-mb-sm-1\">Comments</h3>\r\n          </div>\r\n          {conversation.map((conversation, index) =>\r\n            <ConversationCell key={index} conversation={conversation}/>\r\n          )}\r\n\r\n        </CustomScrollbars>\r\n\r\n\r\n        <div className=\"gx-chat-main-footer gx-todo-main-footer\">\r\n          <div className=\"gx-flex-row gx-align-items-center\">\r\n            <div className=\"gx-col\">\r\n              <div className=\"gx-form-group\">\r\n                <TextArea className=\"gx-border-0 ant-input gx-chat-textarea\"\r\n                          id=\"required\"\r\n                          onKeyUp={this._handleKeyPress.bind(this)}\r\n                          onChange={this.updateMessageValue.bind(this)}\r\n                          value={message}\r\n                          rows={2}\r\n                          placeholder=\"Type and hit enter to send message\"/>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"gx-chat-sent\"\r\n                 onClick={this.submitComment.bind(this)}\r\n                 aria-label=\"Send message\">\r\n              <i className=\"gx-icon-btn icon icon-sent\"/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoDetail;\r\n"]},"metadata":{},"sourceType":"module"}