{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Button, Input, message, Modal, Upload } from \"antd\";\nimport Moment from \"moment\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\nconst {\n  TextArea\n} = Input;\nconst props = {\n  name: 'file',\n  action: '//jsonplaceholder.typicode.com/posts/',\n  headers: {\n    authorization: 'authorization-text'\n  },\n\n  onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  }\n\n};\n\nclass ComposeMail extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      to: '',\n      cc: '',\n      bcc: '',\n      subject: '',\n      message: ''\n    };\n  }\n\n  render() {\n    const {\n      onMailSend,\n      onClose,\n      user\n    } = this.props;\n    const {\n      to,\n      subject,\n      message\n    } = this.state;\n    return __jsx(Modal, {\n      onCancel: onClose,\n      visible: this.props.open,\n      title: __jsx(IntlMessages, {\n        id: \"mail.title\"\n      }),\n      closable: false,\n      onOk: () => {\n        if (to === '') return;\n        onClose();\n        onMailSend({\n          'id': '15453a06c08fb021776',\n          'from': {\n            'name': user.name,\n            'avatar': user.avatar,\n            'email': user.email\n          },\n          'to': [{\n            'name': to,\n            'email': to\n          }],\n          'subject': subject,\n          'message': message,\n          'time': Moment().format('DD MMM'),\n          'read': false,\n          'starred': false,\n          'important': false,\n          'hasAttachments': false,\n          'folder': 1,\n          'selected': false,\n          'labels': []\n        });\n      },\n      style: {\n        zIndex: 2600\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(Input, {\n      placeholder: \"To*\",\n      onChange: event => this.setState({\n        to: event.target.value\n      }),\n      defaultValue: to,\n      margin: \"normal\"\n    })), __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(Input, {\n      placeholder: \"Subject\",\n      onChange: event => this.setState({\n        subject: event.target.value\n      }),\n      value: subject,\n      margin: \"normal\"\n    })), __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(TextArea, {\n      placeholder: \"Message\",\n      onChange: event => this.setState({\n        message: event.target.value\n      }),\n      value: message,\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      margin: \"normal\"\n    })), __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(Upload, props, __jsx(Button, {\n      type: \"primary\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-attachment\"\n    }), \" Attach File\"))));\n  }\n\n}\n\nexport default ComposeMail;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/app/components/mail/Compose/index.js"],"names":["React","Button","Input","message","Modal","Upload","Moment","IntlMessages","TextArea","props","name","action","headers","authorization","onChange","info","file","status","console","log","fileList","success","error","ComposeMail","Component","constructor","state","to","cc","bcc","subject","render","onMailSend","onClose","user","open","avatar","email","format","zIndex","event","setState","target","value","minRows","maxRows"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,MAAvC,QAAoD,MAApD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,MAAM;AAACC,EAAAA;AAAD,IAAaN,KAAnB;AAEA,MAAMO,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE,MADM;AAEZC,EAAAA,MAAM,EAAE,uCAFI;AAGZC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAE;AADR,GAHG;;AAMZC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,QAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,WAAzB,EAAsC;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACC,IAAjB,EAAuBD,IAAI,CAACK,QAA5B;AACD;;AACD,QAAIL,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,MAAzB,EAAiC;AAC/Bd,MAAAA,OAAO,CAACkB,OAAR,CAAiB,GAAEN,IAAI,CAACC,IAAL,CAAUN,IAAK,6BAAlC;AACD,KAFD,MAEO,IAAIK,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,OAAzB,EAAkC;AACvCd,MAAAA,OAAO,CAACmB,KAAR,CAAe,GAAEP,IAAI,CAACC,IAAL,CAAUN,IAAK,sBAAhC;AACD;AACF;;AAfW,CAAd;;AAkBA,MAAMa,WAAN,SAA0BvB,KAAK,CAACwB,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,EAAE,EAAE,EADO;AAEXC,MAAAA,EAAE,EAAE,EAFO;AAGXC,MAAAA,GAAG,EAAE,EAHM;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKX3B,MAAAA,OAAO,EAAE;AALE,KAAb;AAOD;;AAED4B,EAAAA,MAAM,GAAG;AACP,UAAM;AAACC,MAAAA,UAAD;AAAaC,MAAAA,OAAb;AAAsBC,MAAAA;AAAtB,QAA8B,KAAKzB,KAAzC;AACA,UAAM;AAACkB,MAAAA,EAAD;AAAKG,MAAAA,OAAL;AAAc3B,MAAAA;AAAd,QAAyB,KAAKuB,KAApC;AACA,WACE,MAAC,KAAD;AAAO,MAAA,QAAQ,EAAEO,OAAjB;AAA0B,MAAA,OAAO,EAAE,KAAKxB,KAAL,CAAW0B,IAA9C;AACO,MAAA,KAAK,EAAE,MAAC,YAAD;AAAc,QAAA,EAAE,EAAC;AAAjB,QADd;AAEO,MAAA,QAAQ,EAAE,KAFjB;AAGO,MAAA,IAAI,EAAE,MAAM;AACV,YAAIR,EAAE,KAAK,EAAX,EACE;AACFM,QAAAA,OAAO;AACPD,QAAAA,UAAU,CACR;AACE,gBAAM,qBADR;AAEE,kBAAQ;AACN,oBAAQE,IAAI,CAACxB,IADP;AAEN,sBAAUwB,IAAI,CAACE,MAFT;AAGN,qBAASF,IAAI,CAACG;AAHR,WAFV;AAOE,gBAAM,CACJ;AACE,oBAAQV,EADV;AAEE,qBAASA;AAFX,WADI,CAPR;AAaE,qBAAWG,OAbb;AAcE,qBAAW3B,OAdb;AAeE,kBAAQG,MAAM,GAAGgC,MAAT,CAAgB,QAAhB,CAfV;AAgBE,kBAAQ,KAhBV;AAiBE,qBAAW,KAjBb;AAkBE,uBAAa,KAlBf;AAmBE,4BAAkB,KAnBpB;AAoBE,oBAAU,CApBZ;AAqBE,sBAAY,KArBd;AAsBE,oBAAU;AAtBZ,SADQ,CAAV;AA0BD,OAjCR;AAkCO,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT;AAlCd,OAmCE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,KAAD;AACE,MAAA,WAAW,EAAC,KADd;AAEE,MAAA,QAAQ,EAAGC,KAAD,IAAW,KAAKC,QAAL,CAAc;AAACd,QAAAA,EAAE,EAAEa,KAAK,CAACE,MAAN,CAAaC;AAAlB,OAAd,CAFvB;AAGE,MAAA,YAAY,EAAEhB,EAHhB;AAIE,MAAA,MAAM,EAAC;AAJT,MADF,CAnCF,EA0CE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,KAAD;AACE,MAAA,WAAW,EAAC,SADd;AAEE,MAAA,QAAQ,EAAGa,KAAD,IAAW,KAAKC,QAAL,CAAc;AAACX,QAAAA,OAAO,EAAEU,KAAK,CAACE,MAAN,CAAaC;AAAvB,OAAd,CAFvB;AAGE,MAAA,KAAK,EAAEb,OAHT;AAIE,MAAA,MAAM,EAAC;AAJT,MADF,CA1CF,EAkDE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,QAAD;AACE,MAAA,WAAW,EAAC,SADd;AAEE,MAAA,QAAQ,EAAGU,KAAD,IAAW,KAAKC,QAAL,CAAc;AAACtC,QAAAA,OAAO,EAAEqC,KAAK,CAACE,MAAN,CAAaC;AAAvB,OAAd,CAFvB;AAGE,MAAA,KAAK,EAAExC,OAHT;AAIE,MAAA,QAAQ,EAAE;AAACyC,QAAAA,OAAO,EAAE,CAAV;AAAaC,QAAAA,OAAO,EAAE;AAAtB,OAJZ;AAKE,MAAA,MAAM,EAAC;AALT,MADF,CAlDF,EA2DE;AAAK,MAAA,SAAS,EAAC;AAAf,OAEE,MAAC,MAAD,EAAYpC,KAAZ,EACE,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAC;AAAb,OACE;AAAG,MAAA,SAAS,EAAC;AAAb,MADF,iBADF,CAFF,CA3DF,CADF;AAuED;;AAtFuC;;AAyF1C,eAAec,WAAf","sourcesContent":["import React from \"react\";\r\nimport {Button, Input, message, Modal, Upload} from \"antd\";\r\nimport Moment from \"moment\";\r\n\r\nimport IntlMessages from \"../../../../util/IntlMessages\";\r\n\r\nconst {TextArea} = Input;\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: '//jsonplaceholder.typicode.com/posts/',\r\n  headers: {\r\n    authorization: 'authorization-text',\r\n  },\r\n  onChange(info) {\r\n    if (info.file.status !== 'uploading') {\r\n      console.log(info.file, info.fileList);\r\n    }\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} file uploaded successfully`);\r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n    }\r\n  },\r\n};\r\n\r\nclass ComposeMail extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      to: '',\r\n      cc: '',\r\n      bcc: '',\r\n      subject: '',\r\n      message: '',\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {onMailSend, onClose, user} = this.props;\r\n    const {to, subject, message} = this.state;\r\n    return (\r\n      <Modal onCancel={onClose} visible={this.props.open}\r\n             title={<IntlMessages id=\"mail.title\"/>}\r\n             closable={false}\r\n             onOk={() => {\r\n               if (to === '')\r\n                 return;\r\n               onClose();\r\n               onMailSend(\r\n                 {\r\n                   'id': '15453a06c08fb021776',\r\n                   'from': {\r\n                     'name': user.name,\r\n                     'avatar': user.avatar,\r\n                     'email': user.email\r\n                   },\r\n                   'to': [\r\n                     {\r\n                       'name': to,\r\n                       'email': to\r\n                     }\r\n                   ],\r\n                   'subject': subject,\r\n                   'message': message,\r\n                   'time': Moment().format('DD MMM'),\r\n                   'read': false,\r\n                   'starred': false,\r\n                   'important': false,\r\n                   'hasAttachments': false,\r\n                   'folder': 1,\r\n                   'selected': false,\r\n                   'labels': [],\r\n                 })\r\n\r\n             }}\r\n             style={{zIndex: 2600}}>\r\n        <div className=\"gx-form-group\">\r\n          <Input\r\n            placeholder=\"To*\"\r\n            onChange={(event) => this.setState({to: event.target.value})}\r\n            defaultValue={to}\r\n            margin=\"normal\"/>\r\n        </div>\r\n        <div className=\"gx-form-group\">\r\n          <Input\r\n            placeholder=\"Subject\"\r\n            onChange={(event) => this.setState({subject: event.target.value})}\r\n            value={subject}\r\n            margin=\"normal\"\r\n          />\r\n        </div>\r\n        <div className=\"gx-form-group\">\r\n          <TextArea\r\n            placeholder=\"Message\"\r\n            onChange={(event) => this.setState({message: event.target.value})}\r\n            value={message}\r\n            autosize={{minRows: 2, maxRows: 6}}\r\n            margin=\"normal\"/>\r\n        </div>\r\n\r\n        <div className=\"gx-form-group\">\r\n\r\n          <Upload {...props}>\r\n            <Button type=\"primary\">\r\n              <i className=\"icon icon-attachment\"/> Attach File\r\n            </Button>\r\n          </Upload>\r\n\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComposeMail;\r\n"]},"metadata":{},"sourceType":"module"}