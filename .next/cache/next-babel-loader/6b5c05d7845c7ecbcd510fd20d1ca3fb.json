{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from \"react\";\nimport { Button, Checkbox, Drawer, Dropdown, Menu, message } from \"antd\";\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport mails from \"./data/mails\";\nimport folders from \"./data/folders\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport MailList from \"../../../app/components/mail/MailList\";\nimport ComposeMail from \"../../../app/components/mail/Compose\";\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\nimport MailDetail from \"../../../app/components/mail/MailDetail\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport CircularProgress from \"../../../app/components/CircularProgress\";\nimport securedPage from '../../../app/hoc/securedPage';\nimport './index.css';\n\nvar Mail = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Mail, _PureComponent);\n\n  var _super = _createSuper(Mail);\n\n  function Mail() {\n    var _this;\n\n    _classCallCheck(this, Mail);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"MailSideBar\", function () {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-chat gx-mr-4\"\n      }), __jsx(IntlMessages, {\n        id: \"sidebar.mail.mailbox\"\n      }))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        type: \"primary\",\n        className: \"gx-btn-block\",\n        onClick: function onClick() {\n          _this.setState({\n            composeMail: true\n          });\n        }\n      }, __jsx(\"i\", {\n        className: \"icon icon-edit gx-mr-2\"\n      }), __jsx(IntlMessages, {\n        id: \"sidebar.mail.compose\"\n      }))), __jsx(\"ul\", {\n        className: \"gx-module-nav\"\n      }, _this.getNavFolders(), __jsx(\"li\", {\n        className: \"gx-module-nav-label\"\n      }, __jsx(IntlMessages, {\n        id: \"sidebar.mail.filters\"\n      })), _this.getNavFilters(), __jsx(\"li\", {\n        className: \"gx-module-nav-label\"\n      }, __jsx(IntlMessages, {\n        id: \"sidebar.mail.labels\"\n      })), _this.getNavLabels()))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteMail\", function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.selected && mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          folder: 4,\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        alertMessage: 'Mail Deleted Successfully',\n        showMessage: true,\n        selectedMails: 0,\n        allMail: mails,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNavFolders\", function () {\n      return folders.map(function (folder, index) {\n        return __jsx(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              return mail.folder === folder.id;\n            });\n\n            _this.setState({\n              selectedFolder: folder.id,\n              noContentFoundMessage: 'No Mail found in selected folder',\n              currentMail: null,\n              loader: true,\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          }\n        }, __jsx(\"span\", {\n          className: \"\".concat(_this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link')\n        }, __jsx(\"i\", {\n          className: \"icon icon-\".concat(folder.icon)\n        }), __jsx(\"span\", null, folder.title)));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFolderMenuItemSelect\", function (e) {\n      var id = +e.key;\n\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.selected && mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          folder: id,\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        noContentFoundMessage: 'No Mail found in selected folder',\n        alertMessage: 'Mail has been moved successfully',\n        showMessage: true,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLabelMenuItemSelect\", function (e) {\n      var id = +e.key;\n\n      var mails = _this.state.allMail.map(function (mail) {\n        if (mail.selected && mail.folder === _this.state.selectedFolder) {\n          if (mail.labels.includes(id)) {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: _this.removeLabel(mail, id)\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: _this.addLabel(mail, id)\n            });\n          }\n        } else {\n          return mail;\n        }\n      });\n\n      _this.setState({\n        noContentFoundMessage: 'No Mail found in selected label',\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allMail: mails,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRequestClose\", function () {\n      _this.setState({\n        composeMail: false,\n        showMessage: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNavFilters\", function () {\n      return filters.map(function (filter, index) {\n        return __jsx(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              if (filter.id === 0 && mail.starred && mail.folder === _this.state.selectedFolder) {\n                return mail;\n              } else if (filter.id === 1 && mail.important && mail.folder === _this.state.selectedFolder) {\n                return mail;\n              }\n\n              return null;\n            });\n\n            _this.setState({\n              noContentFoundMessage: 'No Mail found in selected filter',\n              loader: true,\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          }\n        }, __jsx(\"span\", {\n          className: \"gx-link\"\n        }, __jsx(\"i\", {\n          className: \"icon icon-\".concat(filter.icon)\n        }), __jsx(\"span\", null, filter.title)));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOptionMenuItemSelect\", function (e) {\n      switch (e.key) {\n        case 'All':\n          _this.handleRequestClose();\n\n          _this.getAllMail();\n\n          break;\n\n        case 'None':\n          _this.handleRequestClose();\n\n          _this.getUnselectedAllMail();\n\n          break;\n\n        case 'Read':\n          _this.handleRequestClose();\n\n          _this.getReadMail();\n\n          break;\n\n        case 'Unread':\n          _this.handleRequestClose();\n\n          _this.getUnreadMail();\n\n          break;\n\n        case 'Starred':\n          _this.handleRequestClose();\n\n          _this.getStarredMail();\n\n          break;\n\n        case 'Unstarred':\n          _this.handleRequestClose();\n\n          _this.getUnStarredMail();\n\n          break;\n\n        case 'Important':\n          _this.handleRequestClose();\n\n          _this.getImportantMail();\n\n          break;\n\n        case 'Unimportant':\n          _this.handleRequestClose();\n\n          _this.getUnimportantMail();\n\n          break;\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAllMail\", function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          selected: true\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: mails.length,\n        allMail: mails,\n        optionName: 'All',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnselectedAllMail\", function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        optionName: 'None',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getReadMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Read',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnreadMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unread',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getStarredMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Starred',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnStarredMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'UnStarred',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getImportantMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Important',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnimportantMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unimportant',\n        noContentFoundMessage: 'No Mail found in selected Label',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNavLabels\", function () {\n      return labels.map(function (label, index) {\n        return __jsx(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              return mail.labels.includes(label.id) && mail.folder === _this.state.selectedFolder;\n            });\n\n            _this.setState({\n              loader: true,\n              noContentFoundMessage: 'No Mail found in selected label',\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          }\n        }, __jsx(\"span\", {\n          className: \"gx-link\"\n        }, __jsx(\"i\", {\n          className: \"icon icon-tag gx-text-\".concat(label.color)\n        }), __jsx(\"span\", null, label.title)));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"searchMail\", function (searchText) {\n      if (searchText === '') {\n        _this.setState({\n          folderMails: _this.state.allMail.filter(function (mail) {\n            return !mail.deleted;\n          })\n        });\n      } else {\n        var searchMails = _this.state.allMail.filter(function (mail) {\n          return !mail.deleted && mail.subject.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\n        });\n\n        _this.setState({\n          folderMails: searchMails\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"displayMail\", function (currentMail, folderMails, noContentFoundMessage) {\n      return __jsx(\"div\", {\n        className: \"gx-module-box-column\"\n      }, currentMail === null ? folderMails.length === 0 ? __jsx(\"div\", {\n        className: \"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\"\n      }, noContentFoundMessage) : __jsx(MailList, {\n        mails: folderMails,\n        onStartSelect: _this.onStartSelect.bind(_assertThisInitialized(_this)),\n        onMailSelect: _this.onMailSelect.bind(_assertThisInitialized(_this)),\n        onMailChecked: _this.onMailChecked.bind(_assertThisInitialized(_this))\n      }) : __jsx(MailDetail, {\n        mail: currentMail,\n        onStartSelect: _this.onStartSelect.bind(_assertThisInitialized(_this)),\n        onImportantSelect: _this.onImportantSelect.bind(_assertThisInitialized(_this))\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMailActions\", function () {\n      return __jsx(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\"\n      }, __jsx(Dropdown, {\n        overlay: _this.folderMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"i\", {\n        className: \"icon icon-folder gx-icon-btn\"\n      })), __jsx(Dropdown, {\n        overlay: _this.labelMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"i\", {\n        className: \"icon icon-tag gx-icon-btn\"\n      })), __jsx(\"span\", {\n        onClick: _this.onDeleteMail.bind(_assertThisInitialized(_this))\n      }, __jsx(\"i\", {\n        className: \"icon icon-trash gx-icon-btn\"\n      })));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"optionMenu\", function () {\n      return __jsx(Menu, {\n        id: \"option-menu\",\n        onClick: _this.onOptionMenuItemSelect.bind(_assertThisInitialized(_this))\n      }, options.map(function (option) {\n        return __jsx(Menu.Item, {\n          key: option.title\n        }, option.title);\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"folderMenu\", function () {\n      return __jsx(Menu, {\n        id: \"folder-menu\",\n        onClick: _this.onFolderMenuItemSelect.bind(_assertThisInitialized(_this))\n      }, folders.map(function (folder) {\n        return __jsx(Menu.Item, {\n          key: folder.id\n        }, folder.title);\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"labelMenu\", function () {\n      return __jsx(Menu, {\n        id: \"label-menu\",\n        onClick: _this.onLabelMenuItemSelect.bind(_assertThisInitialized(_this))\n      }, labels.map(function (label) {\n        return __jsx(Menu.Item, {\n          key: label.id\n        }, label.title);\n      }));\n    });\n\n    _this.state = {\n      searchMail: '',\n      noContentFoundMessage: 'No Mail found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allMail: mails,\n      loader: true,\n      currentMail: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      selectedMails: 0,\n      selectedFolder: 0,\n      composeMail: false,\n      folderMails: mails.filter(function (mail) {\n        return mail.folder === 0;\n      })\n    };\n    return _this;\n  }\n\n  _createClass(Mail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.setState({\n          loader: false\n        });\n      }, 1500);\n    }\n  }, {\n    key: \"onMailChecked\",\n    value: function onMailChecked(data) {\n      data.selected = !data.selected;\n      var selectedMail = 0;\n      var mails = this.state.folderMails.map(function (mail) {\n        if (mail.selected) {\n          selectedMail++;\n        }\n\n        if (mail.id === data.id) {\n          if (mail.selected) {\n            selectedMail++;\n          }\n\n          return data;\n        } else {\n          return mail;\n        }\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        folderMails: mails\n      });\n    }\n  }, {\n    key: \"onAllMailSelect\",\n    value: function onAllMailSelect() {\n      var selectAll = this.state.selectedMails <= this.state.folderMails.length;\n\n      if (selectAll) {\n        this.getAllMail();\n      } else {\n        this.getUnselectedAllMail();\n      }\n    }\n  }, {\n    key: \"removeLabel\",\n    value: function removeLabel(mail, label) {\n      mail.labels.splice(mail.labels.indexOf(label), 1);\n\n      if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n        this.setState({\n          currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n            labels: mail.labels\n          })\n        });\n      }\n\n      return mail.labels;\n    }\n  }, {\n    key: \"onStartSelect\",\n    value: function onStartSelect(data) {\n      data.starred = !data.starred;\n      this.setState({\n        alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n        showMessage: true,\n        folderMails: this.state.folderMails.map(function (mail) {\n          return mail.id === data.id ? data : mail;\n        })\n      });\n    }\n  }, {\n    key: \"onImportantSelect\",\n    value: function onImportantSelect(data) {\n      data.important = !data.important;\n      this.setState({\n        alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n        showMessage: true,\n        folderMails: this.state.folderMails.map(function (mail) {\n          return mail.id === data.id ? data : mail;\n        })\n      });\n    }\n  }, {\n    key: \"onMailSend\",\n    value: function onMailSend(data) {\n      this.setState({\n        alertMessage: 'Mail Sent Successfully',\n        showMessage: true,\n        folderMails: this.state.allMail.concat(data),\n        allMail: this.state.allMail.concat(data)\n      });\n    }\n  }, {\n    key: \"onMailSelect\",\n    value: function onMailSelect(mail) {\n      var _this3 = this;\n\n      this.setState({\n        loader: true,\n        currentMail: mail\n      });\n      setTimeout(function () {\n        _this3.setState({\n          loader: false\n        });\n      }, 1500);\n    }\n  }, {\n    key: \"addLabel\",\n    value: function addLabel(mail, label) {\n      if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n        this.setState({\n          currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n            labels: mail.labels.concat(label)\n          })\n        });\n      }\n\n      return mail.labels.concat(label);\n    }\n  }, {\n    key: \"updateSearch\",\n    value: function updateSearch(evt) {\n      this.setState({\n        searchMail: evt.target.value\n      });\n      this.searchMail(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          selectedMails = _this$state.selectedMails,\n          loader = _this$state.loader,\n          currentMail = _this$state.currentMail,\n          drawerState = _this$state.drawerState,\n          folderMails = _this$state.folderMails,\n          composeMail = _this$state.composeMail,\n          user = _this$state.user,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      return __jsx(\"div\", {\n        className: \"gx-main-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-app-module\"\n      }, __jsx(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\"\n      }, __jsx(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this)\n      }, this.MailSideBar())), __jsx(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n      }, this.MailSideBar()), __jsx(\"div\", {\n        className: \"gx-module-box\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-header\"\n      }, __jsx(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this)\n      })), __jsx(AppModuleHeader, {\n        placeholder: \"Search mails\",\n        user: this.state.user,\n        onChange: this.updateSearch.bind(this),\n        value: this.state.searchMail\n      })), __jsx(\"div\", {\n        className: \"gx-module-box-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-topbar\"\n      }, this.state.currentMail === null ? __jsx(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\"\n      }, this.state.folderMails.length > 0 ? __jsx(React.Fragment, null, __jsx(Checkbox, {\n        color: \"primary\",\n        className: \"gx-icon-btn\",\n        indeterminate: selectedMails > 0 && selectedMails < folderMails.length,\n        checked: selectedMails > 0,\n        onChange: this.onAllMailSelect.bind(this),\n        value: \"SelectMail\"\n      }), __jsx(Dropdown, {\n        overlay: this.optionMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"div\", null, __jsx(\"span\", {\n        className: \"gx-px-2\"\n      }, \" \", this.state.optionName), __jsx(\"i\", {\n        className: \"icon icon-charvlet-down\"\n      })))) : null) : __jsx(\"i\", {\n        className: \"icon icon-arrow-left gx-icon-btn\",\n        onClick: function onClick() {\n          _this4.setState({\n            currentMail: null\n          });\n        }\n      }), __jsx(\"div\", {\n        classID: \"toolbar-separator\"\n      }), selectedMails > 0 && this.getMailActions()), loader ? __jsx(\"div\", {\n        className: \"gx-loader-view\"\n      }, __jsx(CircularProgress, null)) : this.displayMail(currentMail, folderMails, noContentFoundMessage), __jsx(ComposeMail, {\n        open: composeMail,\n        user: user,\n        onClose: this.handleRequestClose.bind(this),\n        onMailSend: this.onMailSend.bind(this)\n      })))), showMessage && message.info(__jsx(\"span\", {\n        id: \"message-id\"\n      }, alertMessage), 3, this.handleRequestClose));\n    }\n  }]);\n\n  return Mail;\n}(PureComponent);\n\nexport default Mail;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/inbuiltApps/Mail/index.js"],"names":["React","PureComponent","Button","Checkbox","Drawer","Dropdown","Menu","message","CustomScrollbars","mails","folders","filters","labels","options","MailList","ComposeMail","AppModuleHeader","MailDetail","IntlMessages","CircularProgress","securedPage","Mail","setState","composeMail","getNavFolders","getNavFilters","getNavLabels","state","allMail","map","mail","selected","folder","selectedFolder","alertMessage","showMessage","selectedMails","folderMails","filter","index","filterMails","id","noContentFoundMessage","currentMail","loader","setTimeout","icon","title","e","key","includes","removeLabel","addLabel","starred","important","handleRequestClose","getAllMail","getUnselectedAllMail","getReadMail","getUnreadMail","getStarredMail","getUnStarredMail","getImportantMail","getUnimportantMail","length","optionName","selectedMail","read","label","color","searchText","deleted","searchMails","subject","toLowerCase","indexOf","onStartSelect","bind","onMailSelect","onMailChecked","onImportantSelect","folderMenu","labelMenu","onDeleteMail","onOptionMenuItemSelect","option","onFolderMenuItemSelect","onLabelMenuItemSelect","searchMail","drawerState","anchorEl","user","name","email","avatar","data","selectAll","splice","concat","evt","target","value","onToggleDrawer","MailSideBar","updateSearch","onAllMailSelect","optionMenu","getMailActions","displayMail","onMailSend","info"],"mappings":"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","sourcesContent":["import React, {PureComponent} from \"react\";\r\nimport {Button, Checkbox, Drawer, Dropdown, Menu, message} from \"antd\";\r\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\r\n\r\nimport mails from \"./data/mails\";\r\nimport folders from \"./data/folders\";\r\nimport filters from \"./data/filters\";\r\nimport labels from \"./data/labels\";\r\nimport options from \"./data/options\";\r\nimport MailList from \"../../../app/components/mail/MailList\";\r\nimport ComposeMail from \"../../../app/components/mail/Compose\";\r\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\r\nimport MailDetail from \"../../../app/components/mail/MailDetail\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\nimport CircularProgress from \"../../../app/components/CircularProgress\";\r\n\r\nimport securedPage from '../../../app/hoc/securedPage';\r\nimport './index.css';\r\n\r\n\r\nclass Mail extends PureComponent {\r\n\r\n  MailSideBar = () => {\r\n    return <div className=\"gx-module-side\">\r\n\r\n      <div className=\"gx-module-side-header\">\r\n        <div className=\"gx-module-logo\">\r\n          <i className=\"icon icon-chat gx-mr-4\"/>\r\n          <IntlMessages id=\"sidebar.mail.mailbox\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"gx-module-side-content\">\r\n        <CustomScrollbars className=\"gx-module-side-scroll\">\r\n          <div className=\"gx-module-add-task\">\r\n            <Button type=\"primary\" className=\"gx-btn-block\"\r\n                    onClick={() => {\r\n                      this.setState({composeMail: true})\r\n                    }}>\r\n              <i className=\"icon icon-edit gx-mr-2\"/>\r\n              <IntlMessages id=\"sidebar.mail.compose\"/></Button>\r\n          </div>\r\n\r\n          <ul className=\"gx-module-nav\">\r\n            {this.getNavFolders()}\r\n\r\n            <li className=\"gx-module-nav-label\">\r\n              <IntlMessages id=\"sidebar.mail.filters\"/>\r\n            </li>\r\n\r\n            {this.getNavFilters()}\r\n\r\n            <li className=\"gx-module-nav-label\">\r\n              <IntlMessages id=\"sidebar.mail.labels\"/>\r\n            </li>\r\n\r\n            {this.getNavLabels()}\r\n\r\n          </ul>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n  };\r\n\r\n  onDeleteMail = () => {\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: 4, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      alertMessage: 'Mail Deleted Successfully',\r\n      showMessage: true,\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  getNavFolders = () => {\r\n    return folders.map((folder, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.folder === folder.id);\r\n        this.setState({\r\n          selectedFolder: folder.id,\r\n          noContentFoundMessage: 'No Mail found in selected folder',\r\n          currentMail: null,\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className={`${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`}>\r\n          <i className={`icon icon-${folder.icon}`}/>\r\n          <span>{folder.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n\r\n\r\n  onFolderMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: id, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      noContentFoundMessage: 'No Mail found in selected folder',\r\n      alertMessage: 'Mail has been moved successfully',\r\n      showMessage: true,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  onLabelMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const mails = this.state.allMail.map(mail => {\r\n        if (mail.selected && (mail.folder === this.state.selectedFolder)) {\r\n          if (mail.labels.includes(id)) {\r\n            return {...mail, labels: this.removeLabel(mail, id)};\r\n          } else {\r\n            return {...mail, labels: this.addLabel(mail, id)};\r\n          }\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      noContentFoundMessage: 'No Mail found in selected label',\r\n      alertMessage: 'Label Updated Successfully',\r\n      showMessage: true,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      composeMail: false,\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getNavFilters = () => {\r\n    return filters.map((filter, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => {\r\n          if (filter.id === 0 && mail.starred && mail.folder === this.state.selectedFolder) {\r\n            return mail\r\n          } else if (filter.id === 1 && mail.important && mail.folder === this.state.selectedFolder) {\r\n            return mail\r\n          }\r\n          return null;\r\n        });\r\n        this.setState({\r\n          noContentFoundMessage: 'No Mail found in selected filter',\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-${filter.icon}`}/>\r\n          <span>{filter.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  onOptionMenuItemSelect = (e) => {\r\n    switch (e.key) {\r\n      case 'All':\r\n        this.handleRequestClose();\r\n        this.getAllMail();\r\n        break;\r\n      case 'None':\r\n        this.handleRequestClose();\r\n        this.getUnselectedAllMail();\r\n        break;\r\n      case 'Read':\r\n        this.handleRequestClose();\r\n        this.getReadMail();\r\n        break;\r\n      case 'Unread':\r\n        this.handleRequestClose();\r\n        this.getUnreadMail();\r\n        break;\r\n      case 'Starred':\r\n        this.handleRequestClose();\r\n        this.getStarredMail();\r\n        break;\r\n      case 'Unstarred':\r\n        this.handleRequestClose();\r\n        this.getUnStarredMail();\r\n        break;\r\n      case 'Important':\r\n        this.handleRequestClose();\r\n        this.getImportantMail();\r\n        break;\r\n      case 'Unimportant':\r\n        this.handleRequestClose();\r\n        this.getUnimportantMail();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  getAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: true\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: mails.length,\r\n      allMail: mails,\r\n      optionName: 'All',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getUnselectedAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: false\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      optionName: 'None',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getReadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Read',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnreadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Unread',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Starred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'UnStarred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getImportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Important',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnimportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Unimportant',\r\n      noContentFoundMessage: 'No Mail found in selected Label',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getNavLabels = () => {\r\n    return labels.map((label, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.labels.includes(label.id) && mail.folder === this.state.selectedFolder);\r\n        this.setState({\r\n          loader: true,\r\n          noContentFoundMessage: 'No Mail found in selected label',\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-tag gx-text-${label.color}`}/>\r\n          <span>{label.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  searchMail = (searchText) => {\r\n    if (searchText === '') {\r\n      this.setState({folderMails: this.state.allMail.filter((mail) => !mail.deleted)});\r\n    } else {\r\n      const searchMails = this.state.allMail.filter((mail) =>\r\n        !mail.deleted && mail.subject.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n      this.setState({\r\n        folderMails: searchMails\r\n      });\r\n    }\r\n  };\r\n  displayMail = (currentMail, folderMails, noContentFoundMessage) => {\r\n    return (<div className=\"gx-module-box-column\">\r\n      {currentMail === null ?\r\n        folderMails.length === 0 ?\r\n          <div className=\"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\">\r\n            {noContentFoundMessage}\r\n          </div>\r\n          :\r\n          <MailList mails={folderMails} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onMailSelect={this.onMailSelect.bind(this)}\r\n                    onMailChecked={this.onMailChecked.bind(this)}/>\r\n        :\r\n        <MailDetail mail={currentMail} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onImportantSelect={this.onImportantSelect.bind(this)}/>}\r\n    </div>)\r\n  };\r\n  getMailActions = () => {\r\n    return <div className=\"gx-flex-row gx-align-items-center\">\r\n\r\n      <Dropdown overlay={this.folderMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-folder gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <Dropdown overlay={this.labelMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-tag gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <span onClick={this.onDeleteMail.bind(this)}>\r\n        <i className=\"icon icon-trash gx-icon-btn\"/></span>\r\n\r\n    </div>\r\n  };\r\n\r\n  optionMenu = () => (\r\n    <Menu id=\"option-menu\"\r\n          onClick={this.onOptionMenuItemSelect.bind(this)}>\r\n      {options.map(option =>\r\n        <Menu.Item key={option.title}>\r\n          {option.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  folderMenu = () => (\r\n    <Menu id=\"folder-menu\"\r\n          onClick={this.onFolderMenuItemSelect.bind(this)}>\r\n      {folders.map(folder =>\r\n        <Menu.Item key={folder.id}>\r\n          {folder.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  labelMenu = () => (\r\n    <Menu id=\"label-menu\"\r\n          onClick={this.onLabelMenuItemSelect.bind(this)}>\r\n      {labels.map(label =>\r\n        <Menu.Item key={label.id}>\r\n          {label.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchMail: '',\r\n      noContentFoundMessage: 'No Mail found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      drawerState: false,\r\n      optionName: 'None',\r\n      anchorEl: null,\r\n      allMail: mails,\r\n      loader: true,\r\n      currentMail: null,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert@example.com',\r\n        avatar: 'https://via.placeholder.com/150x150'\r\n      },\r\n      selectedMails: 0,\r\n      selectedFolder: 0,\r\n      composeMail: false,\r\n      folderMails: mails.filter(mail => mail.folder === 0)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n\r\n  onMailChecked(data) {\r\n    data.selected = !data.selected;\r\n    let selectedMail = 0;\r\n    const mails = this.state.folderMails.map(mail => {\r\n        if (mail.selected) {\r\n          selectedMail++;\r\n        }\r\n        if (mail.id === data.id) {\r\n          if (mail.selected) {\r\n            selectedMail++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      folderMails: mails\r\n    });\r\n  }\r\n\r\n  onAllMailSelect() {\r\n    const selectAll = this.state.selectedMails <= this.state.folderMails.length;\r\n    if (selectAll) {\r\n      this.getAllMail();\r\n    } else {\r\n      this.getUnselectedAllMail();\r\n    }\r\n  }\r\n\r\n  removeLabel(mail, label) {\r\n    mail.labels.splice(mail.labels.indexOf(label), 1);\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels}\r\n      })\r\n    }\r\n    return mail.labels;\r\n  }\r\n\r\n  onStartSelect(data) {\r\n    data.starred = !data.starred;\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onImportantSelect(data) {\r\n    data.important = !data.important;\r\n    this.setState({\r\n      alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onMailSend(data) {\r\n    this.setState(\r\n      {\r\n        alertMessage: 'Mail Sent Successfully',\r\n        showMessage: true,\r\n        folderMails: this.state.allMail.concat(data),\r\n        allMail: this.state.allMail.concat(data)\r\n      }\r\n    );\r\n  }\r\n\r\n  onMailSelect(mail) {\r\n    this.setState({\r\n      loader: true,\r\n      currentMail: mail,\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n  addLabel(mail, label) {\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels.concat(label)}\r\n      })\r\n    }\r\n    return mail.labels.concat(label)\r\n  }\r\n\r\n  updateSearch(evt) {\r\n    this.setState({\r\n      searchMail: evt.target.value,\r\n    });\r\n    this.searchMail(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {selectedMails, loader, currentMail, drawerState, folderMails, composeMail, user, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module\">\r\n\r\n          <div className=\"gx-d-block gx-d-lg-none\">\r\n            <Drawer\r\n              placement=\"left\"\r\n              closable={false}\r\n              visible={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.MailSideBar()}\r\n            </Drawer>\r\n\r\n          </div>\r\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\r\n            {this.MailSideBar()}\r\n          </div>\r\n\r\n          <div className=\"gx-module-box\">\r\n            <div className=\"gx-module-box-header\">\r\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\r\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\r\n                     onClick={this.onToggleDrawer.bind(this)}/>\r\n              </span>\r\n              <AppModuleHeader placeholder=\"Search mails\" user={this.state.user}\r\n                               onChange={this.updateSearch.bind(this)}\r\n                               value={this.state.searchMail}/>\r\n\r\n            </div>\r\n\r\n            <div className=\"gx-module-box-content\">\r\n              <div className=\"gx-module-box-topbar\">\r\n                {this.state.currentMail === null ?\r\n                  <div className=\"gx-flex-row gx-align-items-center\">\r\n                    {this.state.folderMails.length > 0 ?\r\n                      <>\r\n                        <Checkbox color=\"primary\" className=\"gx-icon-btn\"\r\n                                  indeterminate={selectedMails > 0 && selectedMails < folderMails.length}\r\n                                  checked={selectedMails > 0}\r\n                                  onChange={this.onAllMailSelect.bind(this)}\r\n                                  value=\"SelectMail\"/>\r\n\r\n                        <Dropdown overlay={this.optionMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n                          <div>\r\n                            <span className=\"gx-px-2\"> {this.state.optionName}</span>\r\n                            <i className=\"icon icon-charvlet-down\"/></div>\r\n                        </Dropdown>\r\n                      </>\r\n                      : null}\r\n                  </div>\r\n                  :\r\n                  <i className=\"icon icon-arrow-left gx-icon-btn\" onClick={() => {\r\n                    this.setState({currentMail: null})\r\n                  }}/>\r\n                }\r\n\r\n                <div classID=\"toolbar-separator\"/>\r\n\r\n                {(selectedMails > 0) && this.getMailActions()}\r\n\r\n              </div>\r\n\r\n              {loader ?\r\n                <div className=\"gx-loader-view\">\r\n                  <CircularProgress/>\r\n                </div>\r\n                : this.displayMail(currentMail, folderMails, noContentFoundMessage)}\r\n\r\n              <ComposeMail open={composeMail} user={user}\r\n                           onClose={this.handleRequestClose.bind(this)}\r\n                           onMailSend={this.onMailSend.bind(this)}/>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Mail;\r\n"]},"metadata":{},"sourceType":"module"}