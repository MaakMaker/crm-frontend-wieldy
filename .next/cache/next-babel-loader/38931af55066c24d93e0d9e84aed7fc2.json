{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Form, Input, Select, Button, Card } from 'antd';\nvar Option = Select.Option;\n\nvar PriceInput = function PriceInput(_ref) {\n  _s();\n\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? {} : _ref$value,\n      onChange = _ref.onChange;\n\n  var _useState = useState(0),\n      number = _useState[0],\n      setNumber = _useState[1];\n\n  var _useState2 = useState('rmb'),\n      currency = _useState2[0],\n      setCurrency = _useState2[1];\n\n  var triggerChange = function triggerChange(changedValue) {\n    if (onChange) {\n      onChange(_objectSpread(_objectSpread({\n        number: number,\n        currency: currency\n      }, value), changedValue));\n    }\n  };\n\n  var onNumberChange = function onNumberChange(e) {\n    var newNumber = parseInt(e.target.value || 0, 10);\n\n    if (Number.isNaN(number)) {\n      return;\n    }\n\n    if (!('number' in value)) {\n      setNumber(newNumber);\n    }\n\n    triggerChange({\n      number: newNumber\n    });\n  };\n\n  var onCurrencyChange = function onCurrencyChange(newCurrency) {\n    if (!('currency' in value)) {\n      setCurrency(newCurrency);\n    }\n\n    triggerChange({\n      currency: newCurrency\n    });\n  };\n\n  return __jsx(\"span\", null, __jsx(Input, {\n    type: \"text\",\n    value: value.number || number,\n    onChange: onNumberChange,\n    style: {\n      width: '63%',\n      marginRight: '5%'\n    }\n  }), __jsx(Select, {\n    value: value.currency || currency,\n    style: {\n      width: '32%'\n    },\n    onChange: onCurrencyChange\n  }, __jsx(Option, {\n    value: \"rmb\"\n  }, \"RMB\"), __jsx(Option, {\n    value: \"dollar\"\n  }, \"Dollar\")));\n};\n\n_s(PriceInput, \"jai7kXIu40aduisP49YC2evIGPE=\");\n\n_c = PriceInput;\n\nvar CustomizedFormControls = function CustomizedFormControls() {\n  var onFinish = function onFinish(values) {\n    console.log('Received values from form: ', values);\n  };\n\n  var checkPrice = function checkPrice(rule, value) {\n    if (value.number > 0) {\n      return Promise.resolve();\n    }\n\n    return Promise.reject('Price must be greater than zero!');\n  };\n\n  return __jsx(Card, {\n    className: \"gx-card\",\n    title: \"Customized Form Controls\"\n  }, __jsx(Form, {\n    name: \"customized_form_controls\",\n    layout: \"inline\",\n    onFinish: onFinish,\n    initialValues: {\n      price: {\n        number: 0,\n        currency: 'rmb'\n      }\n    }\n  }, __jsx(Form.Item, {\n    name: \"price\",\n    label: \"Price\",\n    rules: [{\n      validator: checkPrice\n    }]\n  }, __jsx(PriceInput, null)), __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Submit\"))));\n};\n\n_c2 = CustomizedFormControls;\nexport default CustomizedFormControls;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PriceInput\");\n$RefreshReg$(_c2, \"CustomizedFormControls\");","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/components/dataEntry/Form/CustomizedFormControls.js"],"names":["React","useState","Form","Input","Select","Button","Card","Option","PriceInput","value","onChange","number","setNumber","currency","setCurrency","triggerChange","changedValue","onNumberChange","e","newNumber","parseInt","target","Number","isNaN","onCurrencyChange","newCurrency","width","marginRight","CustomizedFormControls","onFinish","values","console","log","checkPrice","rule","Promise","resolve","reject","price","validator"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Input, Select, Button ,Card} from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nconst PriceInput = ({ value = {}, onChange }) => {\r\n  const [number, setNumber] = useState(0);\r\n  const [currency, setCurrency] = useState('rmb');\r\n\r\n  const triggerChange = changedValue => {\r\n    if (onChange) {\r\n      onChange({\r\n        number,\r\n        currency,\r\n        ...value,\r\n        ...changedValue,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onNumberChange = e => {\r\n    const newNumber = parseInt(e.target.value || 0, 10);\r\n\r\n    if (Number.isNaN(number)) {\r\n      return;\r\n    }\r\n\r\n    if (!('number' in value)) {\r\n      setNumber(newNumber);\r\n    }\r\n\r\n    triggerChange({\r\n      number: newNumber,\r\n    });\r\n  };\r\n\r\n  const onCurrencyChange = newCurrency => {\r\n    if (!('currency' in value)) {\r\n      setCurrency(newCurrency);\r\n    }\r\n\r\n    triggerChange({\r\n      currency: newCurrency,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        type=\"text\"\r\n        value={value.number || number}\r\n        onChange={onNumberChange}\r\n        style={{\r\n          width: '63%',\r\n          marginRight: '5%'\r\n        }}\r\n      />\r\n      <Select\r\n        value={value.currency || currency}\r\n        style={{\r\n          width: '32%',\r\n        }}\r\n        onChange={onCurrencyChange}\r\n      >\r\n        <Option value=\"rmb\">RMB</Option>\r\n        <Option value=\"dollar\">Dollar</Option>\r\n      </Select>\r\n    </span>\r\n  );\r\n};\r\n\r\nconst CustomizedFormControls = () => {\r\n  const onFinish = values => {\r\n    console.log('Received values from form: ', values);\r\n  };\r\n\r\n  const checkPrice = (rule, value) => {\r\n    if (value.number > 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return Promise.reject('Price must be greater than zero!');\r\n  };\r\n\r\n  return (\r\n    <Card className=\"gx-card\" title=\"Customized Form Controls\">\r\n    <Form\r\n      name=\"customized_form_controls\"\r\n      layout=\"inline\"\r\n      onFinish={onFinish}\r\n      initialValues={{\r\n        price: {\r\n          number: 0,\r\n          currency: 'rmb',\r\n        },\r\n      }}\r\n    >\r\n      <Form.Item\r\n        name=\"price\"\r\n        label=\"Price\"\r\n        rules={[\r\n          {\r\n            validator: checkPrice,\r\n          },\r\n        ]}\r\n      >\r\n        <PriceInput />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n    </Card>\r\n  );\r\n};\r\nexport default CustomizedFormControls;\r\n"]},"metadata":{},"sourceType":"module"}