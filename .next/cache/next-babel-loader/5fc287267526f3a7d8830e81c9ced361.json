{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, Dropdown, Menu, message } from \"antd\";\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport toDos from \"./data/todo\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport todoConversation from \"./data/todoConversation\";\nimport ToDoList from \"../../../app/components/todo/ToDoList\";\nimport ToDoDetail from \"../../../app/components/todo/ToDoDetail\";\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport CircularProgress from \"../../../app/components/CircularProgress\";\nimport './index.css';\nconst ITEM_HEIGHT = 34;\n\nclass ToDo extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"onSortEnd\", ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState({\n        toDos: (this.state.toDos, oldIndex, newIndex)\n      });\n    });\n\n    _defineProperty(this, \"onLabelSelect\", event => {\n      this.setState({\n        anchorEl: event.currentTarget,\n        labelMenuState: !this.state.labelMenuState\n      });\n    });\n\n    _defineProperty(this, \"onOptionMenuSelect\", event => {\n      this.setState({\n        anchorEl: event.currentTarget,\n        optionMenuState: !this.state.optionMenuState\n      });\n    });\n\n    _defineProperty(this, \"onOptionMenuItemSelect\", e => {\n      switch (e.key) {\n        case 'All':\n          this.handleRequestClose();\n          this.getAllTodo();\n          break;\n\n        case 'None':\n          this.handleRequestClose();\n          this.getUnselectedAllTodo();\n          break;\n\n        case 'Starred':\n          this.handleRequestClose();\n          this.getStarredToDo();\n          break;\n\n        case 'Unstarred':\n          this.handleRequestClose();\n          this.getUnStarredTodo();\n          break;\n\n        case 'Important':\n          this.handleRequestClose();\n          this.getImportantToDo();\n          break;\n\n        case 'Unimportant':\n          this.handleRequestClose();\n          this.getUnimportantToDo();\n          break;\n\n        default:\n          return '';\n      }\n    });\n\n    _defineProperty(this, \"getAllTodo\", () => {\n      let toDos = this.state.allToDos.map(todo => todo ? _objectSpread(_objectSpread({}, todo), {}, {\n        selected: true\n      }) : todo);\n      this.setState({\n        selectedToDos: toDos.length,\n        allToDos: toDos,\n        optionName: 'All',\n        toDos: toDos\n      });\n    });\n\n    _defineProperty(this, \"getUnselectedAllTodo\", () => {\n      let toDos = this.state.allToDos.map(todo => todo ? _objectSpread(_objectSpread({}, todo), {}, {\n        selected: false\n      }) : todo);\n      this.setState({\n        selectedToDos: 0,\n        allToDos: toDos,\n        optionName: 'None',\n        toDos: toDos\n      });\n    });\n\n    _defineProperty(this, \"getStarredToDo\", () => {\n      let selectedToDos = 0;\n      let toDos = this.state.allToDos.map(todo => {\n        if (todo.starred) {\n          selectedToDos++;\n          return _objectSpread(_objectSpread({}, todo), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, todo), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        toDos: toDos.filter(todo => !todo.deleted)\n      });\n      return toDos;\n    });\n\n    _defineProperty(this, \"getUnStarredTodo\", () => {\n      let selectedToDos = 0;\n      let toDos = this.state.allToDos.map(todo => {\n        if (!todo.starred) {\n          selectedToDos++;\n          return _objectSpread(_objectSpread({}, todo), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, todo), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        optionName: 'Unstarred',\n        toDos: toDos.filter(todo => !todo.deleted)\n      });\n      return toDos;\n    });\n\n    _defineProperty(this, \"getImportantToDo\", () => {\n      let selectedToDos = 0;\n      let toDos = this.state.allToDos.map(todo => {\n        if (todo.important) {\n          selectedToDos++;\n          return _objectSpread(_objectSpread({}, todo), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, todo), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        optionName: 'Important',\n        toDos: toDos.filter(todo => !todo.deleted)\n      });\n      return toDos;\n    });\n\n    _defineProperty(this, \"getUnimportantToDo\", () => {\n      let selectedToDos = 0;\n      let toDos = this.state.allToDos.map(todo => {\n        if (!todo.important) {\n          selectedToDos++;\n          return _objectSpread(_objectSpread({}, todo), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, todo), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        optionName: 'Unimportant',\n        toDos: toDos.filter(todo => !todo.deleted)\n      });\n      return toDos;\n    });\n\n    _defineProperty(this, \"onLabelMenuItemSelect\", e => {\n      const label = +e.key;\n      this.handleRequestClose();\n      const toDos = this.state.allToDos.map(todo => {\n        if (todo.selected) {\n          if (todo.labels.includes(label.id)) {\n            return _objectSpread(_objectSpread({}, todo), {}, {\n              labels: this.removeLabel(todo, label.id)\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, todo), {}, {\n              labels: this.addLabel(todo, label.id)\n            });\n          }\n        } else {\n          return todo;\n        }\n      });\n      this.setState({\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allToDos: toDos,\n        toDos: toDos\n      });\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        showMessage: false,\n        addTodo: false,\n        labelMenuState: false,\n        optionMenuState: false\n      });\n    });\n\n    _defineProperty(this, \"onLabelUpdate\", (data, label) => {\n      if (data.labels.includes(label.id)) {\n        data.labels = this.removeLabel(data, label.id);\n      } else {\n        data.labels = this.addLabel(data, label.id);\n      }\n\n      this.handleRequestClose();\n      const toDos = this.state.allToDos.map(todo => {\n        if (todo.id === data.id) {\n          return data;\n        } else {\n          return todo;\n        }\n      });\n      this.setState({\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        currentTodo: data,\n        allToDos: toDos,\n        toDos: toDos\n      });\n    });\n\n    _defineProperty(this, \"onMarkAsStart\", data => {\n      const toDos = this.state.allToDos.map(todo => {\n        if (todo.id === data.id) {\n          return data;\n        } else {\n          return todo;\n        }\n      });\n      this.setState({\n        alertMessage: 'ToDo Updated Successfully',\n        showMessage: true,\n        allToDos: toDos,\n        toDos: toDos\n      });\n    });\n\n    _defineProperty(this, \"onToDoUpdate\", data => {\n      this.handleRequestClose();\n      const toDos = this.state.allToDos.map(todo => {\n        if (todo.id === data.id) {\n          return data;\n        } else {\n          return todo;\n        }\n      });\n      this.setState({\n        alertMessage: 'ToDo Updated Successfully',\n        showMessage: true,\n        currentTodo: data,\n        allToDos: toDos,\n        toDos: toDos\n      });\n    });\n\n    _defineProperty(this, \"onDeleteToDo\", data => {\n      let selectedToDos = 0;\n      const toDos = this.state.allToDos.map(todo => {\n        if (todo.selected) {\n          selectedToDos++;\n        }\n\n        if (data.id === todo.id) {\n          if (todo.selected) {\n            selectedToDos--;\n          }\n\n          return _objectSpread(_objectSpread({}, todo), {}, {\n            deleted: true\n          });\n        } else {\n          return todo;\n        }\n      });\n      this.setState({\n        alertMessage: 'ToDo Deleted Successfully',\n        showMessage: true,\n        allToDos: toDos,\n        currentTodo: null,\n        selectedToDos: selectedToDos,\n        toDos: toDos.filter(todo => !todo.deleted)\n      });\n    });\n\n    _defineProperty(this, \"getNavFilters\", () => {\n      return filters.map((filter, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allToDos.filter(todo => {\n            if (filter.id === 0 && todo.starred) {\n              return todo;\n            } else if (filter.id === 1 && todo.important) {\n              return todo;\n            } else if (filter.id === 2 && todo.important) {\n              return todo;\n            } else if (filter.id === 3 && todo.important) {\n              return todo;\n            } else if (filter.id === 4 && todo.completed) {\n              return todo;\n            } else if (filter.id === 5 && todo.deleted) {\n              return todo;\n            } else return todo;\n          });\n          this.setState({\n            loader: true,\n            currentTodo: null,\n            filter: filter.id,\n            toDos: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        }\n      }, __jsx(\"span\", {\n        className: filter.id === this.state.selectedSectionId ? 'gx-link active' : 'gx-link'\n      }, __jsx(\"i\", {\n        className: `icon icon-${filter.icon}`\n      }), __jsx(\"span\", null, filter.title))));\n    });\n\n    _defineProperty(this, \"getNavLabels\", () => {\n      return labels.map((label, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allToDos.filter(todo => todo.labels.includes(label.id));\n          this.setState({\n            loader: true,\n            currentTodo: null,\n            toDos: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        }\n      }, __jsx(\"span\", {\n        className: \"gx-link\"\n      }, __jsx(\"i\", {\n        className: `icon icon-circle gx-text-${label.color}`\n      }), __jsx(\"span\", null, label.title))));\n    });\n\n    _defineProperty(this, \"ToDoSideBar\", () => {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-check-circle-o gx-mr-4\"\n      }), __jsx(IntlMessages, {\n        id: \"sidebar.todoApp\"\n      }))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        variant: \"raised\",\n        type: \"primary\",\n        className: \"gx-btn-block\",\n        onClick: () => {\n          this.setState({\n            addTodo: true\n          });\n        }\n      }, \" \", __jsx(IntlMessages, {\n        id: \"todo.addTask\"\n      }), \" \")), __jsx(\"ul\", {\n        className: \"gx-module-nav\"\n      }, __jsx(\"li\", {\n        onClick: () => {\n          this.setState({\n            currentTodo: null,\n            toDos: this.state.allToDos\n          });\n        }\n      }, __jsx(\"span\", {\n        className: \"gx-link active\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-all-contacts gx-pt-1\"\n      }), __jsx(\"span\", null, __jsx(IntlMessages, {\n        id: \"todo.all\"\n      })))), __jsx(\"li\", {\n        className: \"gx-module-nav-label\"\n      }, __jsx(IntlMessages, {\n        id: \"todo.filters\"\n      })), this.getNavFilters(), __jsx(\"li\", {\n        className: \"gx-module-nav-label\"\n      }, __jsx(IntlMessages, {\n        id: \"todo.labels\"\n      })), this.getNavLabels()))));\n    });\n\n    _defineProperty(this, \"searchTodo\", searchText => {\n      if (searchText === '') {\n        this.setState({\n          toDos: this.state.allToDos.filter(todo => !todo.deleted)\n        });\n      } else {\n        const searchToDos = this.state.allToDos.filter(todo => !todo.deleted && todo.title.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\n        this.setState({\n          toDos: searchToDos\n        });\n      }\n    });\n\n    _defineProperty(this, \"showToDos\", ({\n      currentTodo,\n      toDos,\n      conversation,\n      user\n    }) => {\n      return currentTodo === null ? __jsx(ToDoList, {\n        toDos: toDos,\n        onSortEnd: this.onSortEnd,\n        onMarkAsStart: this.onMarkAsStart.bind(this),\n        onTodoSelect: this.onTodoSelect.bind(this),\n        onTodoChecked: this.onTodoChecked.bind(this),\n        useDragHandle: true\n      }) : __jsx(ToDoDetail, {\n        todo: currentTodo,\n        user: user,\n        conversation: conversation,\n        onLabelUpdate: this.onLabelUpdate.bind(this),\n        onToDoUpdate: this.onToDoUpdate.bind(this),\n        onDeleteToDo: this.onDeleteToDo.bind(this)\n      });\n    });\n\n    _defineProperty(this, \"optionMenu\", () => {\n      return __jsx(Menu, {\n        id: \"option-menu\",\n        onClick: this.onOptionMenuItemSelect.bind(this),\n        onClose: this.handleRequestClose,\n        style: {\n          maxHeight: ITEM_HEIGHT * 5.5\n        }\n      }, options.map(option => __jsx(Menu.Item, {\n        key: option.title\n      }, option.title)));\n    });\n\n    _defineProperty(this, \"labelMenu\", () => {\n      return __jsx(Menu, {\n        id: \"label-menu\",\n        onClick: this.onLabelMenuItemSelect.bind(this),\n        onClose: this.handleRequestClose,\n        style: {\n          maxHeight: ITEM_HEIGHT * 4.5\n        }\n      }, labels.map(label => __jsx(Menu.Item, {\n        key: label\n      }, label.title)));\n    });\n\n    this.state = {\n      searchTodo: '',\n      alertMessage: '',\n      loader: false,\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allToDos: toDos,\n      currentTodo: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      selectedToDos: 0,\n      labelMenuState: false,\n      optionMenuState: false,\n      toDos: toDos,\n      filter: -1,\n      todoConversation,\n      conversation: null\n    };\n  }\n\n  componentDidMount() {\n    this.manageHeight();\n  }\n\n  componentDidUpdate() {\n    this.manageHeight();\n  }\n\n  getToDoConversation(id) {\n    return todoConversation.find(conversation => conversation.id === id);\n  }\n\n  onTodoChecked(data) {\n    data.selected = !data.selected;\n    let selectedToDos = 0;\n    const toDos = this.state.toDos.map(todo => {\n      if (todo.selected) {\n        selectedToDos++;\n      }\n\n      if (todo.id === data.id) {\n        if (todo.selected) {\n          selectedToDos++;\n        }\n\n        return data;\n      } else {\n        return todo;\n      }\n    });\n    this.setState({\n      selectedToDos: selectedToDos,\n      toDos: toDos\n    });\n  }\n\n  onAllTodoSelect() {\n    const selectAll = this.state.selectedToDos < this.state.toDos.length;\n\n    if (selectAll) {\n      this.getAllTodo();\n    } else {\n      this.getUnselectedAllTodo();\n    }\n  }\n\n  onTodoAdd(data) {\n    this.setState({\n      toDos: this.state.allToDos.concat(data),\n      allToDos: this.state.allToDos.concat(data)\n    });\n  }\n\n  manageHeight() {}\n\n  onTodoSelect(todo) {\n    let conversationList = this.getToDoConversation(todo.id);\n\n    if (conversationList) {\n      conversationList = conversationList.conversationData;\n    } else {\n      conversationList = [];\n    }\n\n    this.setState({\n      currentTodo: todo,\n      loader: true,\n      conversation: conversationList\n    });\n    setTimeout(() => {\n      this.setState({\n        loader: false\n      });\n    }, 1500);\n  }\n\n  removeLabel(todo, label) {\n    todo.labels.splice(todo.labels.indexOf(label), 1);\n    return todo.labels;\n  }\n\n  addLabel(todo, label) {\n    todo.labels = todo.labels.concat(label);\n    return todo.labels;\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  updateSearch(evt) {\n    this.setState({\n      searchTodo: evt.target.value\n    });\n    this.searchTodo(evt.target.value);\n  }\n\n  render() {\n    const {\n      selectedToDos,\n      loader,\n      drawerState,\n      toDos,\n      alertMessage,\n      showMessage\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"gx-main-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-app-module\"\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\"\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this)\n    }, this.ToDoSideBar())), __jsx(\"div\", {\n      className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n    }, this.ToDoSideBar()), __jsx(\"div\", {\n      className: \"gx-module-box\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-header\"\n    }, __jsx(\"span\", {\n      className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-menu gx-icon-btn\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this)\n    })), __jsx(AppModuleHeader, {\n      placeholder: \"Search To Do\",\n      user: this.state.user,\n      onChange: this.updateSearch.bind(this),\n      value: this.state.searchTodo\n    })), __jsx(\"div\", {\n      className: \"gx-module-box-content\"\n    }, this.state.currentTodo === null ? __jsx(\"div\", {\n      className: \"gx-module-box-topbar gx-module-box-topbar-todo\"\n    }, this.state.toDos.length > 0 ? __jsx(React.Fragment, null, __jsx(Checkbox, {\n      className: \"gx-icon-btn\",\n      color: \"primary\",\n      indeterminate: selectedToDos > 0 && selectedToDos < toDos.length,\n      checked: selectedToDos > 0,\n      onChange: this.onAllTodoSelect.bind(this),\n      value: \"SelectMail\"\n    }), __jsx(Dropdown, {\n      overlay: this.optionMenu(),\n      placement: \"bottomRight\",\n      trigger: ['click']\n    }, __jsx(\"div\", null, __jsx(\"span\", {\n      className: \"gx-px-2\"\n    }, \" \", this.state.optionName), __jsx(\"i\", {\n      className: \"icon icon-charvlet-down\"\n    })))) : null, selectedToDos > 0 && __jsx(Dropdown, {\n      overlay: this.labelMenu(),\n      placement: \"bottomRight\",\n      trigger: ['click']\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-tag\"\n    }))) : __jsx(\"div\", {\n      className: \"gx-module-box-topbar\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-arrow-left gx-icon-btn\",\n      onClick: () => {\n        this.setState({\n          currentTodo: null\n        });\n      }\n    })), loader ? __jsx(\"div\", {\n      className: \"gx-loader-view\"\n    }, __jsx(CircularProgress, null)) : this.showToDos(this.state)))), showMessage && message.info(__jsx(\"span\", {\n      id: \"message-id\"\n    }, alertMessage), 3, this.handleRequestClose));\n  }\n\n}\n\nexport default ToDo;","map":{"version":3,"sources":["E:/frontend-projects/crm-frontend-wieldy/routes/inbuiltApps/Todo/index.js"],"names":["React","Component","Button","Checkbox","Drawer","Dropdown","Menu","message","CustomScrollbars","toDos","filters","labels","options","todoConversation","ToDoList","ToDoDetail","AppModuleHeader","IntlMessages","CircularProgress","ITEM_HEIGHT","ToDo","constructor","oldIndex","newIndex","setState","state","event","anchorEl","currentTarget","labelMenuState","optionMenuState","e","key","handleRequestClose","getAllTodo","getUnselectedAllTodo","getStarredToDo","getUnStarredTodo","getImportantToDo","getUnimportantToDo","allToDos","map","todo","selected","selectedToDos","length","optionName","starred","filter","deleted","important","label","includes","id","removeLabel","addLabel","alertMessage","showMessage","addTodo","data","currentTodo","index","filterMails","completed","loader","setTimeout","selectedSectionId","icon","title","color","getNavFilters","getNavLabels","searchText","searchToDos","toLowerCase","indexOf","conversation","user","onSortEnd","onMarkAsStart","bind","onTodoSelect","onTodoChecked","onLabelUpdate","onToDoUpdate","onDeleteToDo","onOptionMenuItemSelect","maxHeight","option","onLabelMenuItemSelect","searchTodo","drawerState","name","email","avatar","componentDidMount","manageHeight","componentDidUpdate","getToDoConversation","find","onAllTodoSelect","selectAll","onTodoAdd","concat","conversationList","conversationData","splice","onToggleDrawer","updateSearch","evt","target","value","render","ToDoSideBar","optionMenu","labelMenu","showToDos","info"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Button, Checkbox, Drawer, Dropdown, Menu, message} from \"antd\";\r\n\r\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\r\nimport toDos from \"./data/todo\";\r\nimport filters from \"./data/filters\";\r\nimport labels from \"./data/labels\";\r\nimport options from \"./data/options\";\r\nimport todoConversation from \"./data/todoConversation\";\r\nimport ToDoList from \"../../../app/components/todo/ToDoList\";\r\nimport ToDoDetail from \"../../../app/components/todo/ToDoDetail\";\r\nimport AppModuleHeader from \"../../../app/components/AppModuleHeader\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\nimport CircularProgress from \"../../../app/components/CircularProgress\";\r\n\r\nimport './index.css';\r\n\r\nconst ITEM_HEIGHT = 34;\r\n\r\nclass ToDo extends Component {\r\n\r\n  onSortEnd = ({oldIndex, newIndex}) => {\r\n    this.setState({\r\n      toDos: (this.state.toDos, oldIndex, newIndex),\r\n    });\r\n  };\r\n  onLabelSelect = event => {\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n      labelMenuState: !this.state.labelMenuState\r\n    })\r\n  };\r\n  onOptionMenuSelect = event => {\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n      optionMenuState: !this.state.optionMenuState\r\n    })\r\n  };\r\n  onOptionMenuItemSelect = (e) => {\r\n    switch (e.key) {\r\n      case 'All':\r\n        this.handleRequestClose();\r\n        this.getAllTodo();\r\n        break;\r\n      case 'None':\r\n        this.handleRequestClose();\r\n        this.getUnselectedAllTodo();\r\n        break;\r\n      case 'Starred':\r\n        this.handleRequestClose();\r\n        this.getStarredToDo();\r\n        break;\r\n      case 'Unstarred':\r\n        this.handleRequestClose();\r\n        this.getUnStarredTodo();\r\n        break;\r\n      case 'Important':\r\n        this.handleRequestClose();\r\n        this.getImportantToDo();\r\n        break;\r\n      case 'Unimportant':\r\n        this.handleRequestClose();\r\n        this.getUnimportantToDo();\r\n        break;\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n  getAllTodo = () => {\r\n    let toDos = this.state.allToDos.map((todo) => todo ? {\r\n      ...todo,\r\n      selected: true\r\n    } : todo);\r\n    this.setState({\r\n      selectedToDos: toDos.length,\r\n      allToDos: toDos,\r\n      optionName: 'All',\r\n      toDos: toDos\r\n    });\r\n  };\r\n  getUnselectedAllTodo = () => {\r\n    let toDos = this.state.allToDos.map((todo) => todo ? {\r\n      ...todo,\r\n      selected: false\r\n    } : todo);\r\n    this.setState({\r\n      selectedToDos: 0,\r\n      allToDos: toDos,\r\n      optionName: 'None',\r\n      toDos: toDos\r\n    });\r\n  };\r\n  getStarredToDo = () => {\r\n    let selectedToDos = 0;\r\n    let toDos = this.state.allToDos.map((todo) => {\r\n      if (todo.starred) {\r\n        selectedToDos++;\r\n        return {...todo, selected: true};\r\n      }\r\n      return {...todo, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedToDos: selectedToDos,\r\n      allToDos: toDos,\r\n      toDos: toDos.filter(todo => !todo.deleted)\r\n    });\r\n    return toDos;\r\n  };\r\n  getUnStarredTodo = () => {\r\n    let selectedToDos = 0;\r\n    let toDos = this.state.allToDos.map((todo) => {\r\n      if (!todo.starred) {\r\n        selectedToDos++;\r\n        return {...todo, selected: true};\r\n      }\r\n      return {...todo, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedToDos: selectedToDos,\r\n      allToDos: toDos,\r\n      optionName: 'Unstarred',\r\n      toDos: toDos.filter(todo => !todo.deleted)\r\n    });\r\n    return toDos;\r\n  };\r\n  getImportantToDo = () => {\r\n    let selectedToDos = 0;\r\n    let toDos = this.state.allToDos.map((todo) => {\r\n      if (todo.important) {\r\n        selectedToDos++;\r\n        return {...todo, selected: true};\r\n      }\r\n      return {...todo, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedToDos: selectedToDos,\r\n      allToDos: toDos,\r\n      optionName: 'Important',\r\n      toDos: toDos.filter(todo => !todo.deleted)\r\n    });\r\n    return toDos;\r\n  };\r\n  getUnimportantToDo = () => {\r\n    let selectedToDos = 0;\r\n    let toDos = this.state.allToDos.map((todo) => {\r\n      if (!todo.important) {\r\n        selectedToDos++;\r\n        return {...todo, selected: true};\r\n      }\r\n      return {...todo, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedToDos: selectedToDos,\r\n      allToDos: toDos,\r\n      optionName: 'Unimportant',\r\n      toDos: toDos.filter(todo => !todo.deleted)\r\n    });\r\n\r\n    return toDos;\r\n  };\r\n  onLabelMenuItemSelect = (e) => {\r\n    const label = +e.key;\r\n    this.handleRequestClose();\r\n    const toDos = this.state.allToDos.map(todo => {\r\n        if (todo.selected) {\r\n          if (todo.labels.includes(label.id)) {\r\n            return {...todo, labels: this.removeLabel(todo, label.id)};\r\n          } else {\r\n            return {...todo, labels: this.addLabel(todo, label.id)};\r\n          }\r\n        } else {\r\n          return todo;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      alertMessage: 'Label Updated Successfully',\r\n      showMessage: true,\r\n      allToDos: toDos,\r\n      toDos: toDos\r\n    });\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({showMessage: false, addTodo: false, labelMenuState: false, optionMenuState: false,});\r\n  };\r\n  onLabelUpdate = (data, label) => {\r\n    if (data.labels.includes(label.id)) {\r\n      data.labels = this.removeLabel(data, label.id);\r\n    } else {\r\n      data.labels = this.addLabel(data, label.id);\r\n    }\r\n    this.handleRequestClose();\r\n    const toDos = this.state.allToDos.map(todo => {\r\n        if (todo.id === data.id) {\r\n          return data;\r\n        } else {\r\n          return todo;\r\n        }\r\n      }\r\n    );\r\n\r\n    this.setState({\r\n      alertMessage: 'Label Updated Successfully',\r\n      showMessage: true,\r\n      currentTodo: data,\r\n      allToDos: toDos,\r\n      toDos: toDos,\r\n    });\r\n  };\r\n  onMarkAsStart = (data) => {\r\n    const toDos = this.state.allToDos.map(todo => {\r\n      if (todo.id === data.id) {\r\n        return data;\r\n      } else {\r\n        return todo;\r\n      }\r\n    });\r\n    this.setState({\r\n      alertMessage: 'ToDo Updated Successfully',\r\n      showMessage: true,\r\n      allToDos: toDos,\r\n      toDos: toDos,\r\n    });\r\n  };\r\n\r\n  onToDoUpdate = (data) => {\r\n    this.handleRequestClose();\r\n    const toDos = this.state.allToDos.map(todo => {\r\n      if (todo.id === data.id) {\r\n        return data;\r\n      } else {\r\n        return todo;\r\n      }\r\n    });\r\n    this.setState({\r\n      alertMessage: 'ToDo Updated Successfully',\r\n      showMessage: true,\r\n      currentTodo: data,\r\n      allToDos: toDos,\r\n      toDos: toDos,\r\n    });\r\n  };\r\n\r\n\r\n  onDeleteToDo = (data) => {\r\n    let selectedToDos = 0;\r\n    const toDos = this.state.allToDos.map(todo => {\r\n        if (todo.selected) {\r\n          selectedToDos++\r\n        }\r\n        if (data.id === todo.id) {\r\n          if (todo.selected) {\r\n            selectedToDos--\r\n          }\r\n          return {...todo, deleted: true};\r\n        } else {\r\n          return todo;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      alertMessage: 'ToDo Deleted Successfully',\r\n      showMessage: true,\r\n      allToDos: toDos,\r\n      currentTodo: null,\r\n      selectedToDos: selectedToDos,\r\n      toDos: toDos.filter((todo) => !todo.deleted)\r\n    });\r\n\r\n  };\r\n  getNavFilters = () => {\r\n    return filters.map((filter, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allToDos.filter(todo => {\r\n          if (filter.id === 0 && todo.starred) {\r\n            return todo\r\n          } else if (filter.id === 1 && todo.important) {\r\n            return todo\r\n          } else if (filter.id === 2 && todo.important) {\r\n            return todo\r\n          } else if (filter.id === 3 && todo.important) {\r\n            return todo\r\n          } else if (filter.id === 4 && todo.completed) {\r\n            return todo\r\n          } else if (filter.id === 5 && todo.deleted) {\r\n            return todo\r\n          } else\r\n            return todo\r\n        });\r\n        this.setState({\r\n          loader: true,\r\n          currentTodo: null,\r\n          filter: filter.id,\r\n          toDos: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className={filter.id === this.state.selectedSectionId ? 'gx-link active' : 'gx-link'}>\r\n          <i className={`icon icon-${filter.icon}`}/>\r\n          <span>{filter.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  getNavLabels = () => {\r\n    return labels.map((label, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allToDos.filter(todo => todo.labels.includes(label.id));\r\n        this.setState({\r\n          loader: true,\r\n          currentTodo: null,\r\n          toDos: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-circle gx-text-${label.color}`}/>\r\n          <span>{label.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  ToDoSideBar = () => {\r\n    return <div className=\"gx-module-side\">\r\n      <div className=\"gx-module-side-header\">\r\n        <div className=\"gx-module-logo\">\r\n          <i className=\"icon icon-check-circle-o gx-mr-4\"/>\r\n          <IntlMessages id=\"sidebar.todoApp\"/>\r\n        </div>\r\n\r\n      </div>\r\n      <div className=\"gx-module-side-content\">\r\n        <CustomScrollbars className=\"gx-module-side-scroll\">\r\n          <div className=\"gx-module-add-task\">\r\n            <Button variant=\"raised\" type=\"primary\" className=\"gx-btn-block\"\r\n                    onClick={() => {\r\n                      this.setState({addTodo: true})\r\n                    }}> <IntlMessages id=\"todo.addTask\"/> </Button>\r\n          </div>\r\n          <ul className=\"gx-module-nav\">\r\n\r\n            <li onClick={() => {\r\n              this.setState({\r\n                currentTodo: null,\r\n                toDos: this.state.allToDos\r\n              });\r\n            }\r\n            }>\r\n              <span className=\"gx-link active\">\r\n                <i className=\"icon icon-all-contacts gx-pt-1\"/>\r\n                <span><IntlMessages id=\"todo.all\"/></span>\r\n              </span>\r\n            </li>\r\n\r\n            <li className=\"gx-module-nav-label\">\r\n              <IntlMessages id=\"todo.filters\"/>\r\n            </li>\r\n\r\n            {this.getNavFilters()}\r\n\r\n            <li className=\"gx-module-nav-label\">\r\n              <IntlMessages id=\"todo.labels\"/>\r\n            </li>\r\n            {this.getNavLabels()}\r\n          </ul>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n  };\r\n  searchTodo = (searchText) => {\r\n    if (searchText === '') {\r\n      this.setState({toDos: this.state.allToDos.filter((todo) => !todo.deleted)});\r\n    } else {\r\n      const searchToDos = this.state.allToDos.filter((todo) =>\r\n        !todo.deleted && todo.title.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n      this.setState({\r\n        toDos: searchToDos\r\n      });\r\n    }\r\n  };\r\n  showToDos = ({currentTodo, toDos, conversation, user}) => {\r\n    return currentTodo === null ?\r\n      <ToDoList toDos={toDos} onSortEnd={this.onSortEnd}\r\n                onMarkAsStart={this.onMarkAsStart.bind(this)}\r\n                onTodoSelect={this.onTodoSelect.bind(this)}\r\n                onTodoChecked={this.onTodoChecked.bind(this)} useDragHandle={true}/>\r\n      :\r\n      <ToDoDetail todo={currentTodo} user={user}\r\n                  conversation={conversation}\r\n                  onLabelUpdate={this.onLabelUpdate.bind(this)}\r\n                  onToDoUpdate={this.onToDoUpdate.bind(this)}\r\n                  onDeleteToDo={this.onDeleteToDo.bind(this)}/>\r\n  };\r\n  optionMenu = () => {\r\n    return (<Menu id=\"option-menu\" onClick={this.onOptionMenuItemSelect.bind(this)}\r\n                  onClose={this.handleRequestClose}\r\n                  style={{maxHeight: ITEM_HEIGHT * 5.5}}>\r\n      {options.map(option =>\r\n        <Menu.Item key={option.title}\r\n        >\r\n          {option.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>)\r\n\r\n  };\r\n  labelMenu = () => {\r\n    return (\r\n      <Menu id=\"label-menu\" onClick={this.onLabelMenuItemSelect.bind(this)}\r\n            onClose={this.handleRequestClose}\r\n            style={{maxHeight: ITEM_HEIGHT * 4.5}}>\r\n        {labels.map(label =>\r\n          <Menu.Item key={label}>\r\n            {label.title}\r\n          </Menu.Item>,\r\n        )}\r\n      </Menu>)\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchTodo: '',\r\n      alertMessage: '',\r\n      loader: false,\r\n      showMessage: false,\r\n      drawerState: false,\r\n      optionName: 'None',\r\n      anchorEl: null,\r\n      allToDos: toDos,\r\n      currentTodo: null,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert.johnson@example.com',\r\n        avatar: 'https://via.placeholder.com/150x150'\r\n      },\r\n      selectedToDos: 0,\r\n      labelMenuState: false,\r\n      optionMenuState: false,\r\n      toDos: toDos,\r\n      filter: -1,\r\n      todoConversation,\r\n      conversation: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.manageHeight();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.manageHeight();\r\n  }\r\n\r\n  getToDoConversation(id) {\r\n    return todoConversation.find((conversation) => conversation.id === id);\r\n  }\r\n\r\n  onTodoChecked(data) {\r\n    data.selected = !data.selected;\r\n    let selectedToDos = 0;\r\n    const toDos = this.state.toDos.map(todo => {\r\n        if (todo.selected) {\r\n          selectedToDos++;\r\n        }\r\n        if (todo.id === data.id) {\r\n          if (todo.selected) {\r\n            selectedToDos++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return todo;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedToDos: selectedToDos,\r\n      toDos: toDos\r\n    });\r\n  }\r\n\r\n  onAllTodoSelect() {\r\n    const selectAll = this.state.selectedToDos < this.state.toDos.length;\r\n    if (selectAll) {\r\n      this.getAllTodo();\r\n    } else {\r\n      this.getUnselectedAllTodo();\r\n    }\r\n  }\r\n\r\n  onTodoAdd(data) {\r\n    this.setState(\r\n      {\r\n        toDos: this.state.allToDos.concat(data),\r\n        allToDos: this.state.allToDos.concat(data)\r\n      }\r\n    );\r\n  }\r\n\r\n  manageHeight() {\r\n  }\r\n\r\n  onTodoSelect(todo) {\r\n    let conversationList = this.getToDoConversation(todo.id);\r\n    if (conversationList) {\r\n      conversationList = conversationList.conversationData;\r\n    } else {\r\n      conversationList = [];\r\n    }\r\n    this.setState({\r\n      currentTodo: todo,\r\n      loader: true,\r\n      conversation: conversationList\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n  removeLabel(todo, label) {\r\n    todo.labels.splice(todo.labels.indexOf(label), 1);\r\n    return todo.labels;\r\n  }\r\n\r\n  addLabel(todo, label) {\r\n    todo.labels = todo.labels.concat(label);\r\n    return todo.labels\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  updateSearch(evt) {\r\n    this.setState({\r\n      searchTodo: evt.target.value,\r\n    });\r\n    this.searchTodo(evt.target.value)\r\n  }\r\n\r\n  render() {\r\n    const {selectedToDos, loader, drawerState, toDos, alertMessage, showMessage} = this.state;\r\n\r\n    return (\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module\">\r\n          <div className=\"gx-d-block gx-d-lg-none\">\r\n            <Drawer\r\n              placement=\"left\"\r\n              closable={false}\r\n              visible={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.ToDoSideBar()}\r\n            </Drawer>\r\n          </div>\r\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\r\n            {this.ToDoSideBar()}\r\n          </div>\r\n\r\n          <div className=\"gx-module-box\">\r\n            <div className=\"gx-module-box-header\">\r\n\r\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\r\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\r\n                     onClick={this.onToggleDrawer.bind(this)}/>\r\n              </span>\r\n              <AppModuleHeader placeholder=\"Search To Do\" user={this.state.user}\r\n                               onChange={this.updateSearch.bind(this)}\r\n                               value={this.state.searchTodo}/>\r\n            </div>\r\n            <div className=\"gx-module-box-content\">\r\n              {this.state.currentTodo === null ?\r\n                <div className=\"gx-module-box-topbar gx-module-box-topbar-todo\">\r\n                  {this.state.toDos.length > 0 ?\r\n                    <>\r\n                      <Checkbox className=\"gx-icon-btn\" color=\"primary\"\r\n                                indeterminate={selectedToDos > 0 && selectedToDos < toDos.length}\r\n                                checked={selectedToDos > 0}\r\n                                onChange={this.onAllTodoSelect.bind(this)}\r\n                                value=\"SelectMail\"/>\r\n                      <Dropdown overlay={this.optionMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n                        <div>\r\n                          <span className=\"gx-px-2\"> {this.state.optionName}</span>\r\n                          <i className=\"icon icon-charvlet-down\"/>\r\n                        </div>\r\n                      </Dropdown>\r\n                    </> : null}\r\n\r\n                  {(selectedToDos > 0) &&\r\n\r\n                  <Dropdown overlay={this.labelMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n                    <i className=\"gx-icon-btn icon icon-tag\"/>\r\n                  </Dropdown>\r\n                  }\r\n                </div>\r\n                :\r\n                <div className=\"gx-module-box-topbar\">\r\n                  <i className=\"icon icon-arrow-left gx-icon-btn\" onClick={() => {\r\n                    this.setState({currentTodo: null})\r\n                  }}/>\r\n                </div>\r\n              }\r\n              {loader ?\r\n                <div className=\"gx-loader-view\">\r\n                  <CircularProgress/>\r\n                </div> :\r\n                this.showToDos(this.state)\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ToDo;\r\n"]},"metadata":{},"sourceType":"module"}